<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Light]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="/"/>
  <updated>2016-04-08T07:16:27.000Z</updated>
  <id>/</id>
  
  <author>
    <name><![CDATA[Light]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Material Design Lite]]></title>
    <link href="/2016/04/07/Material-Design-Lite/"/>
    <id>/2016/04/07/Material-Design-Lite/</id>
    <published>2016-04-07T11:06:24.000Z</published>
    <updated>2016-04-08T07:16:27.000Z</updated>
    <content type="html"><![CDATA[<p>今天在翻「增长黑客」这本书的时候，意外看到乔布斯演讲当中的一句话，感觉这汤好猛。</p>
<blockquote>
<p>你不可能从现在预测到未来，只有回头看时，才会发现事物之间的联系。所以你必须相信，那些生命中的点点滴滴，将会在你未来的生命里，以某种方式串联起来。你必须始终相信一些东西－－你的勇气，宿命，生活，因缘，随便什么，它们将给你追寻内心真正所想的自信，带你走离平凡，变得与众不同。</p>
</blockquote>
<p>虽然和今天写的内容并没有什么关联，但是今天令我感觉深刻的就是这句话，所以用它作为开篇也无妨。</p>
<h3 id="Material_Design_Lite">Material Design Lite</h3><p>Material Design Lite (MDL) 可以让你制作出 Material Design 风格的网页。它提供了一套 MD 风格的 CSS 和 material.js。如果你不知道 MD 设计风格是怎么样的，可以自行脑补一下。它的层级，阴影，动画效果一定能够让你喜悦。</p>
<p><img src="http://7xluln.com1.z0.glb.clouddn.com/materialdesign_introduction.png" alt="image"></p>
<a id="more"></a>
<p>我此前并没有学习过 Web 相关的东西，使用 MDL 纯粹是因为个人喜好。因为我喜欢 Material Design，看我之前的 Blog 也能知道在 Android 开发方面也经常使用。重点的是因为喜欢，还有一些工作上的需求，所以想学下，从搭建自己的 Blog 入手。应该会把它制作成 Hexo 的一个主题。</p>
<p>官方有个例子是这样的，感觉不错，估计会仿照它的模式来做。</p>
<p><img src="http://7xluln.com1.z0.glb.clouddn.com/blog_1.png" alt="image"></p>
<p><img src="http://7xluln.com1.z0.glb.clouddn.com/blog_2.png" alt="image"></p>
<p>也有人说，Blog 注重的是内容，如果内容不那么好，样子好也没什么用啊。当然也是对的，优质的内容并不是很容易产出的。再者如果一个女孩子的内心不太好，可是长得漂亮，一样有人会喜欢对不对。我也就剩下这么点追求了。</p>
<h3 id="Getting_Started">Getting Started</h3><p>其实它官方的 Getting Started 已经写的很详细了。它提供 5 种方式使用 MDL。因为一些科学上网的因素，我直接将它的 CSS 和 Javascript 下载了下来。下载下来是一个 mdl 文件夹，使用这个就可以开始制作 MD 风格的网页。</p>
<p>使用的时候在 head 里面引入即可。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">href</span>=<span class="value">"./mdl/material.min.css"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"./mdl/material.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">href</span>=<span class="value">"https://fonts.googleapis.com/icon?family=Material+Icons"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">href</span>=<span class="value">"styles.css"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">title</span>&gt;</span> Hello World <span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>关于 Google 字体加载慢的问题可以将 <code>fonts.googleapis.com</code> 替换成 <code>fonts.useso.com</code>。应该是可以的，或者使用其他 CDN。</p>
<h4 id="CSS_Theme">CSS Theme</h4><p>有一个很好玩很便捷的自定义颜色选择，它可以用你选择的颜色生成 CSS 主题。</p>
<p><img src="http://7xluln.com1.z0.glb.clouddn.com/blog_3.png" alt="image"></p>
<h4 id="Components">Components</h4><p>官网已经把用到的所有组件都给出了示例代码，很快就能够做出个样子。比如导航栏。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Always shows a header, even in smaller screens. --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"mdl-layout mdl-js-layout mdl-layout--fixed-header"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">header</span> <span class="attribute">class</span>=<span class="value">"mdl-layout__header"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"mdl-layout__header-row"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- Title --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"mdl-layout-title"</span>&gt;</span>Title<span class="tag">&lt;/<span class="title">span</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- Add spacer, to align navigation to the right --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"mdl-layout-spacer"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- Navigation. We hide it in small screens. --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">nav</span> <span class="attribute">class</span>=<span class="value">"mdl-navigation mdl-layout--large-screen-only"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">a</span> <span class="attribute">class</span>=<span class="value">"mdl-navigation__link"</span> <span class="attribute">href</span>=<span class="value">""</span>&gt;</span>Link<span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">a</span> <span class="attribute">class</span>=<span class="value">"mdl-navigation__link"</span> <span class="attribute">href</span>=<span class="value">""</span>&gt;</span>Link<span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">a</span> <span class="attribute">class</span>=<span class="value">"mdl-navigation__link"</span> <span class="attribute">href</span>=<span class="value">""</span>&gt;</span>Link<span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">a</span> <span class="attribute">class</span>=<span class="value">"mdl-navigation__link"</span> <span class="attribute">href</span>=<span class="value">""</span>&gt;</span>Link<span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="title">nav</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"mdl-layout__drawer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"mdl-layout-title"</span>&gt;</span>Title<span class="tag">&lt;/<span class="title">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">nav</span> <span class="attribute">class</span>=<span class="value">"mdl-navigation"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">a</span> <span class="attribute">class</span>=<span class="value">"mdl-navigation__link"</span> <span class="attribute">href</span>=<span class="value">""</span>&gt;</span>Link<span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">a</span> <span class="attribute">class</span>=<span class="value">"mdl-navigation__link"</span> <span class="attribute">href</span>=<span class="value">""</span>&gt;</span>Link<span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">a</span> <span class="attribute">class</span>=<span class="value">"mdl-navigation__link"</span> <span class="attribute">href</span>=<span class="value">""</span>&gt;</span>Link<span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">a</span> <span class="attribute">class</span>=<span class="value">"mdl-navigation__link"</span> <span class="attribute">href</span>=<span class="value">""</span>&gt;</span>Link<span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">nav</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">main</span> <span class="attribute">class</span>=<span class="value">"mdl-layout__content"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"page-content"</span>&gt;</span><span class="comment">&lt;!-- Your content goes here --&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">main</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>效果可以自行在官网 Components 查看。</p>
<p>看了它个几个示例，能够手操几个简单的东西。然后发现很多模式不明白。还是老老实实把 H5 和 CSS 基本知识看了下。就这样，走一步算一步吧。</p>
<p>下一篇将使用 Sketch 手操 Blog 的交互和设计。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>今天在翻「增长黑客」这本书的时候，意外看到乔布斯演讲当中的一句话，感觉这汤好猛。</p>
<blockquote>
<p>你不可能从现在预测到未来，只有回头看时，才会发现事物之间的联系。所以你必须相信，那些生命中的点点滴滴，将会在你未来的生命里，以某种方式串联起来。你必须始终相信一些东西－－你的勇气，宿命，生活，因缘，随便什么，它们将给你追寻内心真正所想的自信，带你走离平凡，变得与众不同。</p>
</blockquote>
<p>虽然和今天写的内容并没有什么关联，但是今天令我感觉深刻的就是这句话，所以用它作为开篇也无妨。</p>
<h3 id="Material_Design_Lite">Material Design Lite</h3><p>Material Design Lite (MDL) 可以让你制作出 Material Design 风格的网页。它提供了一套 MD 风格的 CSS 和 material.js。如果你不知道 MD 设计风格是怎么样的，可以自行脑补一下。它的层级，阴影，动画效果一定能够让你喜悦。</p>
<p><img src="http://7xluln.com1.z0.glb.clouddn.com/materialdesign_introduction.png" alt="image"></p>]]>
    
    </summary>
    
      <category term="Material Design Lite" scheme="/tags/Material-Design-Lite/"/>
    
      <category term="Web" scheme="/categories/Web/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[RecyclerView 2]]></title>
    <link href="/2015/10/14/RecyclerView-2/"/>
    <id>/2015/10/14/RecyclerView-2/</id>
    <published>2015-10-14T15:25:13.000Z</published>
    <updated>2015-10-15T07:57:45.000Z</updated>
    <content type="html"><![CDATA[<h3 id="概述">概述</h3><p>上篇整理完 RecyclerView 的基础部分，这篇是整理常见的刷新和加载更多。刷新使用的是 SwipeRefreshLayout，很喜欢那个圆形的进度条，足够简单明了。但是不像常见的刷新，列表不会向下挪动，又感觉少了点整体性交互。</p>
<h3 id="SwipeRefreshLayout">SwipeRefreshLayout</h3><p><img src="http://7xluln.com1.z0.glb.clouddn.com/recycler/swipe.gif" alt=""></p>
<p>SwipeRefreshLayout 来自 v4 包，使用方式很简单。</p>
<a id="more"></a>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;android<span class="class">.support</span><span class="class">.v4</span><span class="class">.widget</span><span class="class">.SwipeRefreshLayout</span></span><br><span class="line">   android:id=<span class="string">"@+id/swipeRefreshLayout"</span></span><br><span class="line">   android:layout_height=<span class="string">"match_parent"</span></span><br><span class="line">   android:layout_width=<span class="string">"match_parent"</span>&gt;</span><br><span class="line"></span><br><span class="line">   &lt;android<span class="class">.support</span><span class="class">.v7</span><span class="class">.widget</span><span class="class">.RecyclerView</span></span><br><span class="line">	...</span><br><span class="line">   /&gt;</span><br><span class="line">&lt;/android<span class="class">.support</span><span class="class">.v4</span><span class="class">.widget</span><span class="class">.SwipeRefreshLayout</span>&gt;</span><br></pre></td></tr></table></figure>
<p>设置圆环加载条的颜色，可以设置多种，个人喜欢使用一种。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">swipeRefreshLayout</span><span class="class">.setColorSchemeColors</span>(<span class="tag">getResources</span>()<span class="class">.getColor</span>(<span class="tag">R</span><span class="class">.color</span><span class="class">.colorAccent</span>));</span><br></pre></td></tr></table></figure>
<p>最后设置下拉刷新的监听。</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">swipeRefreshLayout.setOnRefreshListener(<span class="keyword">new</span> SwipeRefreshLayout.OnRefreshListener() &#123;</span><br><span class="line">  <span class="annotation">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onRefresh</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      mHandler.postDelayed(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">          <span class="annotation">@Override</span></span><br><span class="line">          <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">              swipeRefreshLayout.setRefreshing(<span class="keyword">false</span>);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;, <span class="number">3000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>这里延时 3 秒，之后 <code>setRefreshing</code> 隐藏进度条。</p>
<h3 id="加载更多">加载更多</h3><p><img src="http://7xluln.com1.z0.glb.clouddn.com/recycler/footer.gif" alt=""></p>
<p><strong>线性竖直</strong>的列表，可以为它添加 FooterView 来显示加载效果。</p>
<h4 id="FooterView">FooterView</h4><p>RecyclerView 当中并没有 addFooterView 这样的方法。所以需要手动判断，当滑动至倒数第二个的时候，创建 HolderView 的时候返回 FooterViewHolder。添加头部布局的原理也是一样的。</p>
<h5 id="判断返回_FooterView_类型">判断返回 FooterView 类型</h5><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">int</span> <span class="title">getItemViewType</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(position+<span class="number">1</span> == getItemCount())&#123;</span><br><span class="line">       <span class="keyword">return</span> TYPE_FOOTER;</span><br><span class="line">   &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> TYPE_ITEM;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>按照生命周期，<code>getItemViewType</code> 将会在 <code>onCreateViewHolder</code> 执行之前调用，所以当在倒数第二位置的时候，返回一个 FooterView 的标志，在 <code>onCreateViewHolder</code> 的时候就可以通过标志判断返回哪个类型的 HolderView。</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@<span class="function">Override</span><br><span class="line"><span class="keyword">public</span> ViewHolder <span class="title">onCreateViewHolder</span>(<span class="params">ViewGroup parent, <span class="keyword">int</span> viewType</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(viewType == TYPE_ITEM)&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> ViewHolder(LayoutInflater.<span class="keyword">from</span>(mCon).inflate(R.layout.item_recycler,parent,<span class="keyword">false</span>));</span><br><span class="line">   &#125;<span class="function"><span class="keyword">else</span> <span class="title">if</span>(<span class="params">viewType == TYPE_FOOTER</span>)</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> ViewHolder(LayoutInflater.<span class="keyword">from</span>(mCon).inflate(R.layout.layout_footer,parent,<span class="keyword">false</span>));</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="OnLoadingMoreLinstener">OnLoadingMoreLinstener</h4><p>这样之后，滚动到最后就会出现进度条。但是，这个加载事件还没有呢。加载事件和上篇点击事件差不多。</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">OnLoadingMoreListener</span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">onLoadingMore</span>(<span class="params"><span class="keyword">int</span> position</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> OnLoadingMoreListener onLoadingMoreListener;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOnLoadingMoreListener</span>(<span class="params">OnLoadingMoreListener onLoadingMoreListener</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">this</span>.onLoadingMoreListener = onLoadingMoreListener;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用一个接口，当出现 FooterView 的时候，在  <code>onBindViewHolder</code> 里面会调用它的 <code>onLoadingMore</code> 方法。</p>
<figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span><span class="params">(onLoadingMoreListener != null &amp;&amp; position == getItemCount<span class="params">()</span>-<span class="number">1</span>)</span>&#123;</span><br><span class="line">      onLoadingMoreListener.onLoadingMore<span class="params">(position)</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p><code>onLoadingMore</code> 这个方法的实现是在 Activity 里面完成的，这里给它添加了几条数据。</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">adapter.setOnLoadingMoreListener(<span class="keyword">new</span> SampleAdapter.OnLoadingMoreListener() &#123;</span><br><span class="line">  <span class="annotation">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onLoadingMore</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">      mHandler.postDelayed(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">              <span class="annotation">@Override</span></span><br><span class="line">              <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                  adapter.insertItems(position);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;,<span class="number">1500</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>做到这里的时候，发现一个问题。当换成 GridLayoutManager 和 StaggeredGridLayoutManager 的时候，因为数据加载完之后，可能结尾并不是平整的（下图），所以添加的 FooterView 并不是在底部，看的很不舒服。</p>
<p><img src="http://7xluln.com1.z0.glb.clouddn.com/recycler/error.jpeg" alt=""></p>
<p>因此，当不是线性竖直的列表，不推荐使用有 FooterView 的加载。我选的方式是让它自动加载，使用 <strong>RecyclerView.OnScrollListener</strong>。</p>
<h4 id="RecyclerView-OnScrollListener">RecyclerView.OnScrollListener</h4><p>监听滚动，当数据还剩最后 5 条的时候，调用数据加载。当然，剩几条看具体项目需求。此时并没有加载进度条了。感觉像这样不平整的底部在下面添加加载进度条也很不和谐。</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">recyelerView.addOnScrollListener(<span class="keyword">new</span> RecyclerView.OnScrollListener() &#123;</span><br><span class="line">  <span class="annotation">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onScrolled</span><span class="params">(RecyclerView recyclerView, <span class="keyword">int</span> dx, <span class="keyword">int</span> dy)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">super</span>.onScrolled(recyclerView, dx, dy);</span><br><span class="line">      <span class="keyword">final</span> <span class="keyword">int</span> itemCount = adapter.getItemCount();</span><br><span class="line">      <span class="keyword">int</span> lastItemPosition = gridLayoutManager.findLastVisibleItemPosition()+<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (dy &gt; <span class="number">0</span> &amp;&amp; lastItemPosition &gt;= itemCount-<span class="number">5</span> &amp;&amp; !isLoadMore) &#123;</span><br><span class="line">          mHandler.postDelayed(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">              <span class="annotation">@Override</span></span><br><span class="line">              <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                  adapter.insertItems(itemCount - <span class="number">1</span>);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;,<span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>通过设置的 LayoutManager 获取最后一个数据的位置，再判断滚动方向（dy &gt; 0 向下滚动），并判断是否滚动到倒数第 5 个以下。</p>
<p><code>isLoadMore</code> 可以用来作为是否正在加载的标志，手动控制。</p>
<h3 id="源码">源码</h3><p><a href="https://github.com/lightlz/RecyclerViewDemo" target="_blank" rel="external">Here</a></p>
<blockquote>
<p>代码因为演示多种效果，有比较多的注释。看不同功能的时候，请打开相应的注释。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="概述">概述</h3><p>上篇整理完 RecyclerView 的基础部分，这篇是整理常见的刷新和加载更多。刷新使用的是 SwipeRefreshLayout，很喜欢那个圆形的进度条，足够简单明了。但是不像常见的刷新，列表不会向下挪动，又感觉少了点整体性交互。</p>
<h3 id="SwipeRefreshLayout">SwipeRefreshLayout</h3><p><img src="http://7xluln.com1.z0.glb.clouddn.com/recycler/swipe.gif" alt=""></p>
<p>SwipeRefreshLayout 来自 v4 包，使用方式很简单。</p>]]>
    
    </summary>
    
      <category term="RecyclerView" scheme="/tags/RecyclerView/"/>
    
      <category term="RecyclerView 下拉刷新" scheme="/tags/RecyclerView-%E4%B8%8B%E6%8B%89%E5%88%B7%E6%96%B0/"/>
    
      <category term="RecyclerView 加载更多" scheme="/tags/RecyclerView-%E5%8A%A0%E8%BD%BD%E6%9B%B4%E5%A4%9A/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[RecyclerView 1]]></title>
    <link href="/2015/10/08/RecyclerView-1/"/>
    <id>/2015/10/08/RecyclerView-1/</id>
    <published>2015-10-08T15:18:04.000Z</published>
    <updated>2015-10-15T07:53:35.000Z</updated>
    <content type="html"><![CDATA[<h3 id="概述">概述</h3><p>RecyclerView 好似说烂了，之前也使用过，好似也没有在正式开发中使用，现在想真正切换过来，想想将会使用到的功能，逐一整理出来。比如，下拉刷新，上拉加载，瀑布流等。</p>
<p>关于 RecyclerView 的基本信息不再介绍，这篇主要整理 RecyclerView 的基本使用，线性列表，网格布局，瀑布流，点击事件等。</p>
<h3 id="Dependencies">Dependencies</h3><p>前提条件得满足是吧。</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">compile</span> <span class="string">'com.android.support:cardview-v7:23+'</span></span><br><span class="line"><span class="keyword">compile</span> <span class="string">'com.android.support:recyclerview-v7:23+'</span></span><br></pre></td></tr></table></figure>
<p>配合 CardView 感觉效果让我比较愉悦。RecyclerView 好似没有像 ListView 那样的 item 分割线，所以 CardView 的阴影层级能够很好的把 item 间隔。</p>
<a id="more"></a>
<h3 id="RecyclerView">RecyclerView</h3><h4 id="布局">布局</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="tag">android</span><span class="class">.support</span><span class="class">.v7</span><span class="class">.widget</span><span class="class">.RecyclerView</span></span><br><span class="line">   <span class="rule"><span class="attribute">android</span>:<span class="value">id=<span class="string">"@+id/recycler"</span></span><br><span class="line">   android:layout_height=<span class="string">"match_parent"</span></span><br><span class="line">   android:layout_width=<span class="string">"match_parent"</span> /&gt;</span></span></span><br></pre></td></tr></table></figure>
<h4 id="CardView">CardView</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;android<span class="class">.support</span><span class="class">.v7</span><span class="class">.widget</span><span class="class">.CardView</span> xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    android:layout_width=<span class="string">"match_parent"</span> android:layout_height=<span class="string">"match_parent"</span></span><br><span class="line">    android:layout_margin=<span class="string">"2dp"</span></span><br><span class="line">    &gt;</span><br><span class="line">    &lt;TextView</span><br><span class="line">        android:id=<span class="string">"@+id/item_tv"</span></span><br><span class="line">        android:layout_width=<span class="string">"match_parent"</span></span><br><span class="line">        android:layout_height=<span class="string">"96dp"</span></span><br><span class="line">        android:<span class="attribute">background</span>=<span class="string">"?attr/colorAccent"</span>/&gt;</span><br><span class="line">&lt;/android<span class="class">.support</span><span class="class">.v7</span><span class="class">.widget</span><span class="class">.CardView</span>&gt;</span><br></pre></td></tr></table></figure>
<p>是的，item 选项只有一个 TextView。</p>
<h4 id="Adapter">Adapter</h4><p>Adapter 需要继承 RecyclerView.Adapter。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">SampleAdapter</span>.<span class="title">ViewHolder</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Context mCon;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; mDataSet;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SampleAdapter</span><span class="params">(Context mCon)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mCon = mCon;</span><br><span class="line">        mDataSet = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">30</span>;i++)&#123;</span><br><span class="line">            mDataSet.add(<span class="string">""</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ViewHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ViewHolder(LayoutInflater.from(mCon).inflate(R.layout.item_recycler,parent,<span class="keyword">false</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(<span class="keyword">final</span> ViewHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mDataSet.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(ViewHolder holder, <span class="keyword">int</span> position, List&lt;Object&gt; payloads)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onBindViewHolder(holder, position, payloads);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        TextView tv ;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ViewHolder</span><span class="params">(View itemView)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(itemView);</span><br><span class="line">            tv = (TextView)itemView.findViewById(R.id.item_tv);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>不再像 ListView 一样针对 View，<code>onCreateViewHolder</code> 直接返回的是 ViewHolder，同时在 <code>onBindViewHolder</code> 中绑定数据。 </p>
<h4 id="LayoutManager">LayoutManager</h4><p>RecyclerView 通过 LayoutManager 管理 item 的布局方式。</p>
<h5 id="LinearLayoutManager">LinearLayoutManager</h5><figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">recyelerView = <span class="params">(RecyclerView)</span>findViewById<span class="params">(R.id.recycler)</span>;</span><br><span class="line">recyelerView.setLayoutManager<span class="params">(new LinearLayoutManager<span class="params">(this)</span>)</span>;</span><br><span class="line">adapter = new SampleAdapter<span class="params">(this)</span>;</span><br><span class="line">recyelerView.setAdapter<span class="params">(adapter)</span>;</span><br></pre></td></tr></table></figure>
<p><img src="http://7xluln.com1.z0.glb.clouddn.com/recycler/LinearLayoutManager.png" alt=""></p>
<h5 id="GridLayoutManager">GridLayoutManager</h5><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">recyelerView.setLayoutManager(<span class="keyword">new</span> GridLayoutManager(<span class="keyword">this</span>,<span class="number">2</span>));</span><br></pre></td></tr></table></figure>
<p>RecyclerView 使用 GridLayoutManager 就可以替代 GridView，item 间隙可以使用 RecyclerView.ItemDecoration 定义。</p>
<p><img src="http://7xluln.com1.z0.glb.clouddn.com/recycler/GridLayoutManager.png" alt=""></p>
<h5 id="StaggeredGridLayoutManager">StaggeredGridLayoutManager</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">recyelerView</span><span class="class">.setLayoutManager</span>(<span class="tag">new</span> <span class="tag">StaggeredGridLayoutManager</span>(2, <span class="tag">OrientationHelper</span><span class="class">.VERTICAL</span>));</span><br></pre></td></tr></table></figure>
<p>使用瀑布流很好像很方便，这里只是更改了下布局的高度。</p>
<p><img src="http://7xluln.com1.z0.glb.clouddn.com/recycler/StaggeredGridLayoutManager.png" alt=""></p>
<h4 id="点击事件">点击事件</h4><p>你应该知道 RecyclerView 没有提供 OnItemClickLinstener，所以这部分需要自己去实现。像很多 Listener 一样，在 Adapter 中使用回调就可以解决。</p>
<p>声明一个点击事件监听器接口。</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">OnItemClickListener</span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">onItemClick</span>(<span class="params">View view,<span class="keyword">int</span> position</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> OnItemClickListener mOnItemClickListener;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setmOnItemClickListener</span>(<span class="params">OnItemClickListener mOnItemClickListener</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">this</span>.mOnItemClickListener = mOnItemClickListener;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 Activity 中设置这个监听器。</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">adapter.setmOnItemClickListener(<span class="keyword">new</span> SampleAdapter.OnItemClickListener() &#123;</span><br><span class="line">  <span class="annotation">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onItemClick</span><span class="params">(View view, <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>在 onBindViewHolder 中回调 onItemClick 方法。</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">holder.tv.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line"> <span class="annotation">@Override</span></span><br><span class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">int</span> position = holder.getLayoutPosition();</span><br><span class="line">     mOnItemClickListener.onItemClick(holder.tv,position);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>当然，你应该把这个 <code>holder.tv</code> 换成 CardView 那个控件。这里只是一个演示方法。</p>
<h4 id="ItemAnimator">ItemAnimator</h4><p>RecyclerView 对 item 的增加删除提供了默认的动画效果。</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">notifyItemInserted<span class="list">(<span class="keyword">position</span>)</span><span class="comment">;</span></span><br><span class="line">notifyItemRemoved<span class="list">(<span class="keyword">positon</span>)</span><span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p><img src="http://7xluln.com1.z0.glb.clouddn.com/recycler/item.gif" alt=""></p>
<p>上图是一个删除 item 的动画效果，更多动画效果可以参考 <a href="https://github.com/gabrielemariotti/RecyclerViewItemAnimators" target="_blank" rel="external">RecyclerViewItemAnimators</a>。</p>
<h3 id="源码">源码</h3><p><a href="https://github.com/lightlz/RecyclerViewDemo" target="_blank" rel="external">Here</a></p>
<blockquote>
<p>代码因为演示多种效果，有比较多的注释。看不同功能的时候，请打开相应的注释。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="概述">概述</h3><p>RecyclerView 好似说烂了，之前也使用过，好似也没有在正式开发中使用，现在想真正切换过来，想想将会使用到的功能，逐一整理出来。比如，下拉刷新，上拉加载，瀑布流等。</p>
<p>关于 RecyclerView 的基本信息不再介绍，这篇主要整理 RecyclerView 的基本使用，线性列表，网格布局，瀑布流，点击事件等。</p>
<h3 id="Dependencies">Dependencies</h3><p>前提条件得满足是吧。</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">compile</span> <span class="string">'com.android.support:cardview-v7:23+'</span></span><br><span class="line"><span class="keyword">compile</span> <span class="string">'com.android.support:recyclerview-v7:23+'</span></span><br></pre></td></tr></table></figure>
<p>配合 CardView 感觉效果让我比较愉悦。RecyclerView 好似没有像 ListView 那样的 item 分割线，所以 CardView 的阴影层级能够很好的把 item 间隔。</p>]]>
    
    </summary>
    
      <category term="Android RecyclerView" scheme="/tags/Android-RecyclerView/"/>
    
      <category term="瀑布流" scheme="/tags/%E7%80%91%E5%B8%83%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android Support Design Library - CoordinatorLayout]]></title>
    <link href="/2015/09/29/Android-Support-Design-Library-CoordinatorLayout/"/>
    <id>/2015/09/29/Android-Support-Design-Library-CoordinatorLayout/</id>
    <published>2015-09-29T03:08:48.000Z</published>
    <updated>2015-09-30T08:52:47.000Z</updated>
    <content type="html"><![CDATA[<h3 id="概述">概述</h3><p>这是 Android Support Design Library 的最后一篇了，此内容在 Material Design 中算是很重要的，我只能用惊艳一词来形容。主要内容是滚动技巧，通过使用 CoordinatorLayout，实现滚动时的各种动画效果。</p>
<p>按照 MD 文档中的使用方式，分为三大类：</p>
<ul>
<li>Standard app bar</li>
<li>Tabs</li>
<li>Flexible space</li>
</ul>
<p>字面上好似不太好理解，主要说明当滚动的时候，Standard app bar 的效果，有 Tabs 的标题栏的效果。Flexible space 就是滚动的时候在标题栏拉出一块空间，用来显示内容（例如图片）。实现这些效果，都需要使用 CoordinatorLayout，在 <a href="http://llzz.me/2015/09/21/Android-Support-Design-Library-Snackbars/" target="_blank" rel="external">Snackbars 章节</a>也使用过，能够让出空间给 Snackbars 显示。</p>
<h4 id="Dependencies">Dependencies</h4><p>前提条件得满足。</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">compile</span> <span class="string">'com.android.support:design:22.2.1'</span></span><br><span class="line"><span class="keyword">compile</span> <span class="string">'com.android.support:appcompat-v7:22.2.1'</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="Standard_app_bar_预览">Standard app bar 预览</h3><p><img src="http://7xluln.com1.z0.glb.clouddn.com/android_support_designstandard.gif" alt=""></p>
<h4 id="布局">布局</h4><p>新建一个布局文件，使用 CoordinatorLayout 作为主要容器。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;android<span class="class">.support</span><span class="class">.design</span><span class="class">.widget</span><span class="class">.CoordinatorLayout</span> xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">xmlns:app=<span class="string">"http://schemas.android.com/apk/res-auto"</span>   android:fitsSystemWindows=<span class="string">"true"</span></span><br><span class="line">&gt;</span><br><span class="line">	&lt;android<span class="class">.support</span><span class="class">.design</span><span class="class">.widget</span><span class="class">.AppBarLayout</span></span><br><span class="line">        android:layout_height=<span class="string">"wrap_content"</span></span><br><span class="line">        android:layout_width=<span class="string">"match_parent"</span>&gt;</span><br><span class="line"></span><br><span class="line">   		 &lt;android<span class="class">.support</span><span class="class">.v7</span><span class="class">.widget</span><span class="class">.Toolbar</span></span><br><span class="line">            ...</span><br><span class="line">            app:layout_scrollFlags=<span class="string">"scroll|enterAlways"</span>/&gt;</span><br><span class="line">            </span><br><span class="line">	&lt;/android<span class="class">.support</span><span class="class">.design</span><span class="class">.widget</span><span class="class">.AppBarLayout</span>&gt;</span><br><span class="line">	</span><br><span class="line">	&lt;android<span class="class">.support</span><span class="class">.v4</span><span class="class">.widget</span><span class="class">.NestedScrollView</span></span><br><span class="line">   		app:layout_behavior=<span class="string">"@string/appbar_scrolling_view_behavior"</span>&gt;</span><br><span class="line">   </span><br><span class="line">		&lt;!-- Your scrolling <span class="attribute">content</span> --&gt;</span><br><span class="line"></span><br><span class="line">	&lt;/android<span class="class">.support</span><span class="class">.v4</span><span class="class">.widget</span><span class="class">.NestedScrollView</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;/android<span class="class">.support</span><span class="class">.design</span><span class="class">.widget</span><span class="class">.CoordinatorLayout</span>&gt;</span><br></pre></td></tr></table></figure>
<p><code>AppBarLayout</code> 需要在第一层级，里面包括 Toolbar。注意看 <code>layout_scrollFlags</code> 属性。同时设置滚动布局的 behavior 为 <code>@string/appbar_scrolling_view_behavior</code>。这样设置之后，向上滚动后，标题栏将会消失，只要向下滚动，标题栏就会出现。</p>
<h4 id="layout_scrollFlags">layout_scrollFlags</h4><table>
<thead>
<tr>
<th style="text-align:center">类型</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">scroll</td>
<td style="text-align:center">需要滚出屏幕的 View 都需要设置此标志</td>
</tr>
<tr>
<td style="text-align:center">exitUntilCollapsed</td>
<td style="text-align:center">滚动推出屏幕到最小高度的时候折叠</td>
</tr>
<tr>
<td style="text-align:center">enterAlways</td>
<td style="text-align:center">向下滚动的时候，设置此标志的 View 将显示</td>
</tr>
<tr>
<td style="text-align:center">enterAlwaysCollapsed</td>
<td style="text-align:center">最小高度进入，到达顶部显示完整高度</td>
</tr>
</tbody>
</table>
<h3 id="Tabs_预览">Tabs 预览</h3><p><img src="http://7xluln.com1.z0.glb.clouddn.com/android_support_designtabs.gif" alt=""></p>
<h4 id="布局-1">布局</h4><p>布局上和 Standard app bar 类似，只需要在 Toolbar 布局下方增加一个 TabLayout。TabLayout 的使用方式可以参看 <a href="http://llzz.me/2015/09/16/Android-Support-Design-Library-TabLayout/" target="_blank" rel="external">TabLayout 章节</a>。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="tag">android</span><span class="class">.support</span><span class="class">.design</span><span class="class">.widget</span><span class="class">.TabLayout</span></span><br><span class="line">  <span class="rule"><span class="attribute">android</span>:<span class="value">layout_height=<span class="string">"wrap_content"</span></span><br><span class="line">  android:layout_width=<span class="string">"match_parent"</span></span><br><span class="line">/&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>同时需要在 Viewpager 设置 behavior 为 <code>@string/appbar_scrolling_view_behavior</code>。设置方式和 Standard app bar 上相同。这样设置之后，向上滚动后，标题栏将会消失，Tabs 显示，只要向下滚动，标题栏将会出现。</p>
<h3 id="Flexible_space_预览">Flexible space 预览</h3><p><img src="http://7xluln.com1.z0.glb.clouddn.com/android_support_designcoo.gif" alt=""></p>
<p>这个是 Android Support Design Library 里面最惊艳的对吧，像把图片折叠一样。</p>
<h4 id="布局-2">布局</h4><p>布局上和之前有稍微更改，增加了 CollapsingToolbarLayout。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&lt;android<span class="class">.support</span><span class="class">.design</span><span class="class">.widget</span><span class="class">.CoordinatorLayout</span> xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    xmlns:app=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span><br><span class="line">    android:layout_width=<span class="string">"match_parent"</span></span><br><span class="line">    android:layout_height=<span class="string">"match_parent"</span></span><br><span class="line">    android:fitsSystemWindows=<span class="string">"true"</span></span><br><span class="line">    &gt;</span><br><span class="line">    &lt;android<span class="class">.support</span><span class="class">.design</span><span class="class">.widget</span><span class="class">.AppBarLayout</span></span><br><span class="line">        android:layout_width=<span class="string">"match_parent"</span></span><br><span class="line">        android:layout_height=<span class="string">"256dp"</span></span><br><span class="line">        android:fitsSystemWindows=<span class="string">"true"</span></span><br><span class="line">       &gt;</span><br><span class="line">        &lt;android<span class="class">.support</span><span class="class">.design</span><span class="class">.widget</span><span class="class">.CollapsingToolbarLayout</span></span><br><span class="line">            android:layout_width=<span class="string">"match_parent"</span></span><br><span class="line">            android:layout_height=<span class="string">"match_parent"</span></span><br><span class="line">            android:fitsSystemWindows=<span class="string">"true"</span></span><br><span class="line">            app:contentScrim=<span class="string">"?attr/colorPrimary"</span></span><br><span class="line">            app:expandedTitleMarginEnd=<span class="string">"64dp"</span></span><br><span class="line">            app:expandedTitleMarginStart=<span class="string">"48dp"</span></span><br><span class="line">            app:layout_scrollFlags=<span class="string">"scroll|exitUntilCollapsed"</span>&gt;</span><br><span class="line"></span><br><span class="line">            &lt;ImageView              </span><br><span class="line">                android:layout_width=<span class="string">"match_parent"</span></span><br><span class="line">                android:layout_height=<span class="string">"match_parent"</span></span><br><span class="line">                android:scaleType=<span class="string">"centerCrop"</span></span><br><span class="line">                android:fitsSystemWindows=<span class="string">"true"</span></span><br><span class="line">                app:layout_collapseMode=<span class="string">"parallax"</span> /&gt;</span><br><span class="line"></span><br><span class="line">            &lt;android<span class="class">.support</span><span class="class">.v7</span><span class="class">.widget</span><span class="class">.Toolbar</span></span><br><span class="line">                 ...</span><br><span class="line">                app:layout_collapseMode=<span class="string">"pin"</span></span><br><span class="line">                &gt;</span><br><span class="line">            &lt;/android<span class="class">.support</span><span class="class">.v7</span><span class="class">.widget</span><span class="class">.Toolbar</span>&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/android<span class="class">.support</span><span class="class">.design</span><span class="class">.widget</span><span class="class">.CollapsingToolbarLayout</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/android<span class="class">.support</span><span class="class">.design</span><span class="class">.widget</span><span class="class">.AppBarLayout</span>&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;android<span class="class">.support</span><span class="class">.v4</span><span class="class">.widget</span><span class="class">.NestedScrollView</span></span><br><span class="line">        android:layout_width=<span class="string">"match_parent"</span></span><br><span class="line">        android:layout_height=<span class="string">"match_parent"</span></span><br><span class="line">        app:layout_behavior=<span class="string">"@string/appbar_scrolling_view_behavior"</span>&gt;</span><br><span class="line"></span><br><span class="line">			...</span><br><span class="line"></span><br><span class="line">    &lt;/android<span class="class">.support</span><span class="class">.v4</span><span class="class">.widget</span><span class="class">.NestedScrollView</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;android<span class="class">.support</span><span class="class">.design</span><span class="class">.widget</span><span class="class">.FloatingActionButton</span></span><br><span class="line">    	... </span><br><span class="line">    /&gt;</span><br><span class="line"></span><br><span class="line">&lt;/android<span class="class">.support</span><span class="class">.design</span><span class="class">.widget</span><span class="class">.CoordinatorLayout</span>&gt;</span><br></pre></td></tr></table></figure>
<p>这里首先得注意的是 AppBarLayout 的高度，一定要设置成一个固定的值，不然滚动将无效果。之后 <code>layout_scrollFlags</code> 需要设置成 <code>scroll|exitUntilCollapsed</code>。</p>
<p>同时设置 Toolbar 的视图模式 <code>layout_collapseMode</code> 为 <code>pin</code>，并设置 ImageView 的视图模式为 <code>parallax</code> 折叠视差。</p>
<p>这时候，如果运行的话，会出现两个问题。</p>
<ul>
<li>标题栏 Title 不显示</li>
<li>状态栏不透明</li>
</ul>
<p>针对第一个问题，Toolbar 标题将无效，需要使用 CollapsingToolbarLayout 来设置标题。</p>
<figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CollapsingToolbarLayout collapsingToolbar =</span><br><span class="line">           <span class="params">(CollapsingToolbarLayout)</span> findViewById<span class="params">(R.id.collapsing_toolbar)</span>;</span><br><span class="line">collapsingToolbar.setTitle<span class="params">(<span class="string">"Title"</span>)</span>;</span><br></pre></td></tr></table></figure>
<p>针对第二个问题需要设置状态栏透明。</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;style <span class="property">name</span>=<span class="string">"AppTheme.transpant"</span> parent=<span class="string">"AppTheme"</span>&gt;</span><br><span class="line">   &lt;<span class="property">item</span> <span class="property">name</span>=<span class="string">"android:windowDrawsSystemBarBackgrounds"</span>&gt;<span class="constant">true</span>&lt;/<span class="property">item</span>&gt;</span><br><span class="line">   &lt;<span class="property">item</span> <span class="property">name</span>=<span class="string">"android:statusBarColor"</span>&gt;@android:color/transparent&lt;/<span class="property">item</span>&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这里单独给这个 Activity 设置主题，主要是因为状态栏透明和 Standard app bar 等会有冲突，Standard app bar 向上滚动，标题栏消失的时候，Title 将会出现在状态栏上。</p>
</blockquote>
<p>如此惊艳的效果就完成了。其实 Material Design 里面还有两个 Flexible space 的效果。</p>
<p>一个是折叠的标题栏，就是下拉出后出现的不是图片，是放大的标题栏。实现方式就是将上面布局中的 ImageView 删除。效果在此不演示了。</p>
<p>另外一个是 Flexible space with overlapping content，字面上很好理解，就是覆盖住上方内容。效果如下图（官方）。</p>
<p><img src="http://7xluln.com1.z0.glb.clouddn.com/android_support_designover.png" alt=""></p>
<p>这个效果只要更改滚动布局的属性 <code>behavior_overlapTop</code>，其他不变。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="tag">android</span><span class="class">.support</span><span class="class">.v4</span><span class="class">.widget</span><span class="class">.NestedScrollView</span></span><br><span class="line">   <span class="rule"><span class="attribute">app</span>:<span class="value">behavior_overlapTop=<span class="string">"64dp"</span></span><br><span class="line">   app:layout_behavior=<span class="string">"@string/appbar_scrolling_view_behavior"</span>/&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>当然也可以在代码中更改。</p>
<figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">NestedScrollView scrollView = ...</span><br><span class="line">CoordinatorLayout.LayoutParams params = </span><br><span class="line">    <span class="params">(CoordinatorLayout.LayoutParams)</span> scrollView.getLayoutParams<span class="params">()</span>;</span><br><span class="line">AppBarLayout.ScrollingViewBehavior behavior =</span><br><span class="line">    <span class="params">(AppBarLayout.ScrollingViewBehavior)</span> params.getBehavior<span class="params">()</span>;</span><br><span class="line">behavior.setOverlapTop<span class="params">(<span class="number">128</span>)</span>; <span class="comment">// <span class="doctag">Note</span>: in pixels</span></span><br></pre></td></tr></table></figure>
<p>但是遇到问题，官方中的效果是标题栏上的 Title 会一直固定在顶部，而现在的效果是 Title 还是和之前效果一样滚动的时候会放大到下方，故在此不展示效果图，有兴趣的可以去看代码。</p>
<h3 id="参考">参考</h3><p><a href="https://guides.codepath.com/android/Handling-Scrolls-with-CoordinatorLayout" target="_blank" rel="external">Handling Scrolls with CoordinatorLayout</a></p>
<p><a href="http://www.google.com/design/spec/patterns/scrolling-techniques.html#" target="_blank" rel="external">Material Design</a></p>
<p><a href="http://stackoverflow.com/questions/31039074/overlap-scrolling-view-with-appbarlayout" target="_blank" rel="external">Overlap scrolling view with AppBarLayout</a></p>
<h3 id="源码">源码</h3><p><a href="https://github.com/lightlz/DesignSupportLib" target="_blank" rel="external">DesignSupportLib</a> </p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="概述">概述</h3><p>这是 Android Support Design Library 的最后一篇了，此内容在 Material Design 中算是很重要的，我只能用惊艳一词来形容。主要内容是滚动技巧，通过使用 CoordinatorLayout，实现滚动时的各种动画效果。</p>
<p>按照 MD 文档中的使用方式，分为三大类：</p>
<ul>
<li>Standard app bar</li>
<li>Tabs</li>
<li>Flexible space</li>
</ul>
<p>字面上好似不太好理解，主要说明当滚动的时候，Standard app bar 的效果，有 Tabs 的标题栏的效果。Flexible space 就是滚动的时候在标题栏拉出一块空间，用来显示内容（例如图片）。实现这些效果，都需要使用 CoordinatorLayout，在 <a href="http://llzz.me/2015/09/21/Android-Support-Design-Library-Snackbars/">Snackbars 章节</a>也使用过，能够让出空间给 Snackbars 显示。</p>
<h4 id="Dependencies">Dependencies</h4><p>前提条件得满足。</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">compile</span> <span class="string">'com.android.support:design:22.2.1'</span></span><br><span class="line"><span class="keyword">compile</span> <span class="string">'com.android.support:appcompat-v7:22.2.1'</span></span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="Android Support Design Library" scheme="/tags/Android-Support-Design-Library/"/>
    
      <category term="CoordinatorLayout" scheme="/tags/CoordinatorLayout/"/>
    
      <category term="CoordinatorToolbarLayout" scheme="/tags/CoordinatorToolbarLayout/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android Support Design Library - PercentLayout]]></title>
    <link href="/2015/09/25/Android-Support-Design-Library-PercentLayout/"/>
    <id>/2015/09/25/Android-Support-Design-Library-PercentLayout/</id>
    <published>2015-09-25T02:20:05.000Z</published>
    <updated>2015-09-25T03:38:39.000Z</updated>
    <content type="html"><![CDATA[<h3 id="概述">概述</h3><p>官方给出了 Percent Layout 百分比布局，能够通过设置相对屏幕的百分比来控制控件的大小。很明显的它能够解决 Android 屏幕适配的问题。</p>
<p>Android Percent Support 这个库提供了两种布局，PercentRelativeLayout 和 PercentFrameLayout，支持设置宽高和 Margin。</p>
<h3 id="Dependencies">Dependencies</h3><p>前提条件得满足。</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">compile</span> <span class="string">'com.android.support:percent:22.2.0'</span></span><br></pre></td></tr></table></figure>
<h3 id="PercentRelativeLayout_预览">PercentRelativeLayout 预览</h3><p><img src="http://7xluln.com1.z0.glb.clouddn.com/android_support_design09F9221E-B570-4AAE-8303-3D78D88C0B74.png" alt=""></p>
<a id="more"></a>
<h4 id="PercentRelativeLayout">PercentRelativeLayout</h4><p>新建一个 xml，使用 PercentRelativeLayout。</p>
<figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;android.support.percent.PercentRelativeLayout</span><br><span class="line">    xmlns:<span class="variable">android=</span><span class="string">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    xmlns:<span class="variable">app=</span><span class="string">"http://schemas.android.com/apk/res-auto"</span></span><br><span class="line">    android:<span class="variable">layout_width=</span><span class="string">"match_parent"</span></span><br><span class="line">    android:<span class="variable">layout_height=</span><span class="string">"match_parent"</span>&gt;</span><br><span class="line">    &lt;TextView</span><br><span class="line">        android:<span class="variable">id=</span><span class="string">"@+id/top_left"</span></span><br><span class="line">        android:<span class="variable">layout_alignParentTop=</span><span class="string">"true"</span></span><br><span class="line">        android:<span class="variable">background=</span><span class="string">"#00796B"</span></span><br><span class="line">        android:<span class="variable">text=</span><span class="string">"How"</span></span><br><span class="line">        app:<span class="variable">layout_heightPercent=</span><span class="string">"20%"</span></span><br><span class="line">        app:<span class="variable">layout_widthPercent=</span><span class="string">"50%"</span></span><br><span class="line">        <span class="variable">style=</span><span class="string">"@style/myPercent"</span>/&gt;</span><br><span class="line">    &lt;TextView</span><br><span class="line">        android:<span class="variable">id=</span><span class="string">"@+id/top_right"</span></span><br><span class="line">        android:<span class="variable">layout_alignParentTop=</span><span class="string">"true"</span></span><br><span class="line">        android:<span class="variable">layout_toRightOf=</span><span class="string">"@+id/top_left"</span></span><br><span class="line">        android:<span class="variable">background=</span><span class="string">"@color/colorAccent"</span></span><br><span class="line">        android:<span class="variable">text=</span><span class="string">"do"</span></span><br><span class="line">        app:<span class="variable">layout_heightPercent=</span><span class="string">"20%"</span></span><br><span class="line">        app:<span class="variable">layout_widthPercent=</span><span class="string">"50%"</span></span><br><span class="line">        <span class="variable">style=</span><span class="string">"@style/myPercent"</span>/&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;!-- 省略<span class="number">2</span>个 --&gt;</span><br><span class="line">        ...</span><br><span class="line">        ...</span><br><span class="line">&lt;/android.support.percent.PercentRelativeLayout&gt;</span><br></pre></td></tr></table></figure>
<p>使用了四个 TextView。需要注意的是 PercentRelativeLayout 也只是一个自定义布局，同样需要使用 layout_height 和 layout_width，这里我把它写进了 style。</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;style <span class="property">name</span>=<span class="string">"myPercent"</span>&gt;</span><br><span class="line">   &lt;<span class="property">item</span> <span class="property">name</span>=<span class="string">"android:layout_height"</span>&gt;<span class="number">0</span>dp&lt;/<span class="property">item</span>&gt;</span><br><span class="line">   &lt;<span class="property">item</span> <span class="property">name</span>=<span class="string">"android:layout_width"</span>&gt;<span class="number">0</span>dp&lt;/<span class="property">item</span>&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<p>主要使用的是 <code>layout_heightPercent</code> 和 <code>layout_widthPercent</code> 设置高度和宽度的百分比。</p>
<p>总体上还是很容易的，PercentFrameLayout 差不多不提了。</p>
<h3 id="PercentLinearLayout_预览">PercentLinearLayout 预览</h3><p><img src="http://7xluln.com1.z0.glb.clouddn.com/android_support_design0B4A923C-09BA-48E8-8974-3FA88F89C878.png" alt=""></p>
<h4 id="自定义_PercentLinearLayout">自定义 PercentLinearLayout</h4><p>官方是没有提供 PercentLinearLayout 这个类，但是还是可以自定义一个的。</p>
<p>我用的方法很简单，新建一个 PercentLinearLayout 类继承 LinearLayout，打开 PercentRelativeLayout 类，复制过去。替换 RelativeLayout 相关的名称为 LinearLayout。这样就完工了。有兴趣的可以去看下具体的源码，PercentRelativeLayout 的源码很少。</p>
<p>PercentLinearLayout 实现原理：</p>
<ul>
<li>LayoutParams 获取子布局的百分比属性值 </li>
<li>OnMeasure 的时候，将百分比换算成屏幕宽高</li>
</ul>
<p>使用方式和 PercentRelativeLayout 差不多。</p>
<h3 id="Percent_实用？">Percent 实用？</h3><p>这个其实有点难说，解决一个问题的时候很容易带出另外一个问题。仔细想想，Percent 是参照物的屏幕的宽高，假如需要定义一个正方形，宽高都设置成 5%？这只是一个例子，因为屏幕宽高不同，造成相同比例的数值就会不同，这样有些场景可能不适用。</p>
<h3 id="参考">参考</h3><p><a href="https://guides.codepath.com/android/Constructing-View-Layouts#percentrelativelayout" target="_blank" rel="external">Constructing View Layouts</a></p>
<h3 id="源码">源码</h3><p><a href="https://github.com/lightlz/DesignSupportLib" target="_blank" rel="external">DesignSupportLib</a> </p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="概述">概述</h3><p>官方给出了 Percent Layout 百分比布局，能够通过设置相对屏幕的百分比来控制控件的大小。很明显的它能够解决 Android 屏幕适配的问题。</p>
<p>Android Percent Support 这个库提供了两种布局，PercentRelativeLayout 和 PercentFrameLayout，支持设置宽高和 Margin。</p>
<h3 id="Dependencies">Dependencies</h3><p>前提条件得满足。</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">compile</span> <span class="string">'com.android.support:percent:22.2.0'</span></span><br></pre></td></tr></table></figure>
<h3 id="PercentRelativeLayout_预览">PercentRelativeLayout 预览</h3><p><img src="http://7xluln.com1.z0.glb.clouddn.com/android_support_design09F9221E-B570-4AAE-8303-3D78D88C0B74.png" alt=""></p>]]>
    
    </summary>
    
      <category term="Android Support Design Library" scheme="/tags/Android-Support-Design-Library/"/>
    
      <category term="PercentLinearLayout" scheme="/tags/PercentLinearLayout/"/>
    
      <category term="PercentRelativeLayout" scheme="/tags/PercentRelativeLayout/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android Support Design Library - TextInputLayout]]></title>
    <link href="/2015/09/23/Android-Support-Design-Library-TextInputLayout/"/>
    <id>/2015/09/23/Android-Support-Design-Library-TextInputLayout/</id>
    <published>2015-09-23T03:56:59.000Z</published>
    <updated>2015-09-24T07:57:57.000Z</updated>
    <content type="html"><![CDATA[<h3 id="概述">概述</h3><p>加入 TextInputLayout 之后，文本输入在功能上变化不大，主要新增了错误提醒功能，包括提醒文字和动画。在交互上变化很大，最明显的就是 hint，普通的 EditText 的 hint 有文字之后是会消失，TextInputLayout 的则是向上滑动缩小展示。</p>
<p>印象比较深刻的是下面这张图，总感觉这样的文本输入界面设计很“大胆”，但是简单大方。</p>
<p><img src="http://7xluln.com1.z0.glb.clouddn.com/android_support_design6529BC26-4A85-4FED-A213-67C56A4D509C.png" alt=""></p>
<a id="more"></a>
<h3 id="预览">预览</h3><p><img src="http://7xluln.com1.z0.glb.clouddn.com/android_support_designtextinputlayout1.gif" alt=""> </p>
<p><img src="http://7xluln.com1.z0.glb.clouddn.com/android_support_designtextinputlayout.gif" alt=""></p>
<h4 id="Dependencies">Dependencies</h4><p>前提条件得满足。</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">compile</span> <span class="string">'com.android.support:design:22.2.1'</span></span><br><span class="line"><span class="keyword">compile</span> <span class="string">'com.android.support:appcompat-v7:22.2.1'</span></span><br></pre></td></tr></table></figure>
<h4 id="TextInputLayout">TextInputLayout</h4><p>新建一个 xml，使用 TextInputLayout。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;android<span class="class">.support</span><span class="class">.design</span><span class="class">.widget</span><span class="class">.TextInputLayout</span></span><br><span class="line">   android:id=<span class="string">"@+id/layout_textinput"</span></span><br><span class="line">   android:layout_height=<span class="string">"wrap_content"</span></span><br><span class="line">   android:layout_margin=<span class="string">"16dp"</span></span><br><span class="line">   android:<span class="attribute">padding</span>=<span class="string">"4dp"</span></span><br><span class="line">   android:layout_width=<span class="string">"match_parent"</span>&gt;</span><br><span class="line"></span><br><span class="line">   &lt;EditText</span><br><span class="line">       android:id=<span class="string">"@+id/et_email"</span></span><br><span class="line">       android:layout_width=<span class="string">"match_parent"</span></span><br><span class="line">       android:layout_height=<span class="string">"wrap_content"</span></span><br><span class="line">       android:hint=<span class="string">"light.lz1993@gmail.com"</span>/&gt;</span><br><span class="line">   </span><br><span class="line">&lt;/android<span class="class">.support</span><span class="class">.design</span><span class="class">.widget</span><span class="class">.TextInputLayout</span>&gt;</span><br></pre></td></tr></table></figure>
<h4 id="TextInputLayout_Style">TextInputLayout Style</h4><p>文本滑动后 hint 和 下方的线条的颜色是由 <code>colorAccent</code> 控制的。</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="property">item</span> <span class="property">name</span>=<span class="string">"colorAccent"</span>&gt;@color/accent&lt;/<span class="property">item</span>&gt;</span><br></pre></td></tr></table></figure>
<p>当然可以控制各种状态时候的颜色。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;item name=<span class="string">"android:colorControlNormal"</span>&gt;@<span class="attribute">color</span>/accent&lt;/item&gt;</span><br><span class="line">&lt;item name=<span class="string">"android:colorControlActivated"</span>&gt;<span class="hexcolor">#303F9F</span>&lt;/item&gt;</span><br><span class="line">&lt;item name=<span class="string">"android:colorControlHighlight"</span>&gt;@<span class="attribute">color</span>/accent&lt;/item&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>你也可以写成一个 style，然后在 TextInputLayout 里面设置样式。但不是很建议这样做，我觉得一个应用，文本输入样式要统一比较好。</p>
</blockquote>
<h4 id="设置监听">设置监听</h4><p>设置文本错误时候的提示。</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">setupTextChangeListener</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">   textInputLayout.getEditText().addTextChangedListener(<span class="keyword">new</span> TextWatcher() &#123;</span><br><span class="line">       <span class="annotation">@Override</span></span><br><span class="line">       <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">beforeTextChanged</span><span class="params">(CharSequence charSequence, <span class="keyword">int</span> i, <span class="keyword">int</span> i1, <span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="annotation">@Override</span></span><br><span class="line">       <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onTextChanged</span><span class="params">(CharSequence charSequence, <span class="keyword">int</span> start, <span class="keyword">int</span> before, <span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">if</span> (!charSequence.toString().contains(<span class="string">"@"</span>)) &#123;</span><br><span class="line">               textInputLayout.setError(<span class="string">"Please fill in the email"</span>);</span><br><span class="line">               textInputLayout.setErrorEnabled(<span class="keyword">true</span>);</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               textInputLayout.setErrorEnabled(<span class="keyword">false</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="annotation">@Override</span></span><br><span class="line">       <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">afterTextChanged</span><span class="params">(Editable editable)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用 <code>setError</code> 设置错误内容，<code>setErrorEnabled</code> 设置显示状态。</p>
<blockquote>
<p>这里只是判断一下是否用 @ 符号，如果判断邮件格式，还是用正则表达式好。</p>
</blockquote>
<p>预览图的第二种类型是一种常见的运用。监听字数的变化，当超过字数限制的时候，作出相应的变化。</p>
<p>只在布局里面增加了一个 TextView，然后监听字数变化，超过颜色变红。然后 TextInputLayout setError。</p>
<p>这里期望是下方的线条变成红色，但是好似 TextInputLayout 不带这个功能。</p>
<blockquote>
<p>是个bug？详细看 <a href="https://code.google.com/p/android/issues/detail?id=175672" target="_blank" rel="external">AOSP 讨论</a>。</p>
</blockquote>
<h3 id="参考">参考</h3><p><a href="https://guides.codepath.com/android/Working-with-the-EditText#displaying-floating-label-feedback" target="_blank" rel="external">Working with the EditText</a></p>
<p><a href="http://www.google.com/design/spec/components/text-fields.html#text-fields-single-line-text-field" target="_blank" rel="external">Material Design</a></p>
<p><a href="http://wiki.jikexueyuan.com/project/material-design/components/text-fields.html" target="_blank" rel="external">Material Design 中文版</a></p>
<h3 id="源码">源码</h3><p><a href="https://github.com/lightlz/DesignSupportLib" target="_blank" rel="external">DesignSupportLib</a> </p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="概述">概述</h3><p>加入 TextInputLayout 之后，文本输入在功能上变化不大，主要新增了错误提醒功能，包括提醒文字和动画。在交互上变化很大，最明显的就是 hint，普通的 EditText 的 hint 有文字之后是会消失，TextInputLayout 的则是向上滑动缩小展示。</p>
<p>印象比较深刻的是下面这张图，总感觉这样的文本输入界面设计很“大胆”，但是简单大方。</p>
<p><img src="http://7xluln.com1.z0.glb.clouddn.com/android_support_design6529BC26-4A85-4FED-A213-67C56A4D509C.png" alt=""></p>]]>
    
    </summary>
    
      <category term="Android Support Design Library" scheme="/tags/Android-Support-Design-Library/"/>
    
      <category term="TextInputLayout" scheme="/tags/TextInputLayout/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android Support Design Library - Snackbars]]></title>
    <link href="/2015/09/21/Android-Support-Design-Library-Snackbars/"/>
    <id>/2015/09/21/Android-Support-Design-Library-Snackbars/</id>
    <published>2015-09-21T08:59:58.000Z</published>
    <updated>2015-09-24T07:58:30.000Z</updated>
    <content type="html"><![CDATA[<h3 id="概述">概述</h3><p>Snackbars 相对于 Toast 主要的区别就是，前者是针对操作的轻量级反馈机制。给我感觉是它很朴实，比较像一块通知卡片，你可以对这个卡片进行简单操作。</p>
<p>相比 Toast 的淡入淡出，Snackbars 主要是滑动消失。可以在屏幕上滑动关闭，或者超时关闭。</p>
<a id="more"></a>
<h3 id="预览">预览</h3><p><img src="http://7xluln.com1.z0.glb.clouddn.com/android_support_design_snackbarssnackbars.gif" alt=""></p>
<h4 id="Dependencies">Dependencies</h4><p>前提条件得满足。</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">compile</span> <span class="string">'com.android.support:design:22.2.1'</span></span><br><span class="line"><span class="keyword">compile</span> <span class="string">'com.android.support:appcompat-v7:22.2.1'</span></span><br></pre></td></tr></table></figure>
<h4 id="Snackbars">Snackbars</h4><p>使用方式和 Toast 差不多，比较简单。</p>
<figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Snackbar.make<span class="params">(mScrollView,<span class="string">"SNACKBAR SHOW"</span>,Snackbar.LENGTH_LONG)</span></span><br><span class="line">.setAction<span class="params">(<span class="string">"UNDO"</span>, new View.OnClickListener<span class="params">()</span> &#123;</span><br><span class="line">   @Override</span><br><span class="line">   public void onClick<span class="params">(View view)</span> &#123;</span><br><span class="line">       Log.v<span class="params">(<span class="string">"Snackbar Undo : "</span> ,<span class="string">"OnClick"</span>)</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;)</span>.show<span class="params">()</span>;</span><br></pre></td></tr></table></figure>
<p>类似这样，可以用 <code>setActionTextColor</code> 更改 Action 文字的颜色，用 <code>setDuration</code> 设置显示时间。</p>
<blockquote>
<p>需要用 <strong>CoordinatorLayout</strong>，这样才能在 Snackbars 出现的时候，FAB 往上移动让出空间。</p>
</blockquote>
<h3 id="参考">参考</h3><p><a href="https://guides.codepath.com/android/Displaying-the-Snackbar#simple-snackbar" target="_blank" rel="external">Displaying the Snackbar</a></p>
<p><a href="http://www.google.com/design/spec/components/snackbars-toasts.html#snackbars-toasts-usage" target="_blank" rel="external">Material Design</a></p>
<h3 id="源码">源码</h3><p><a href="https://github.com/lightlz/DesignSupportLib" target="_blank" rel="external">DesignSupportLib</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="概述">概述</h3><p>Snackbars 相对于 Toast 主要的区别就是，前者是针对操作的轻量级反馈机制。给我感觉是它很朴实，比较像一块通知卡片，你可以对这个卡片进行简单操作。</p>
<p>相比 Toast 的淡入淡出，Snackbars 主要是滑动消失。可以在屏幕上滑动关闭，或者超时关闭。</p>]]>
    
    </summary>
    
      <category term="Android Support Design Library" scheme="/tags/Android-Support-Design-Library/"/>
    
      <category term="Snackbars" scheme="/tags/Snackbars/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android Support Design Library - TabLayout]]></title>
    <link href="/2015/09/16/Android-Support-Design-Library-TabLayout/"/>
    <id>/2015/09/16/Android-Support-Design-Library-TabLayout/</id>
    <published>2015-09-16T15:02:39.000Z</published>
    <updated>2015-09-28T06:42:33.000Z</updated>
    <content type="html"><![CDATA[<h3 id="概述">概述</h3><p>Tab 在手机应用中是相当常见的组件，用来显示有关联的分组内容。Tab 标签能够简要的描述页面内容，好处是有效的进行内容分组和内容导航。TabLayout 是在 Android M 版本中发布出来的，经常和 ViewPager 一起使用，放在标题栏下方。</p>
<blockquote>
<p>发现很多 Android 应用是将 Tab 放在底部的，之前 ActionBar Tab 的时候 Android Design 里面好似有放在底部的，但是 Material Design 中并没有发现放在底部的。</p>
</blockquote>
<p>此处将展示三种类型的 TabLayout，Text 类型，Icon 类型，和自定义的 Tab。</p>
<a id="more"></a>
<h3 id="TabLayout－Text_预览">TabLayout－Text 预览</h3><p><img src="http://7xluln.com1.z0.glb.clouddn.com/android_support_design_tablayouttab_text.gif" alt=""></p>
<h4 id="Dependencies">Dependencies</h4><p>前提条件得满足。</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">compile</span> <span class="string">'com.android.support:design:22.2.1'</span></span><br><span class="line"><span class="keyword">compile</span> <span class="string">'com.android.support:appcompat-v7:22.2.1'</span></span><br></pre></td></tr></table></figure>
<h4 id="TabLayout">TabLayout</h4><p>新建一个 xml 文件，声明 TabLayout &amp; ViewPager。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;android<span class="class">.support</span><span class="class">.design</span><span class="class">.widget</span><span class="class">.TabLayout</span></span><br><span class="line">   android:id=<span class="string">"@+id/layout_tab"</span></span><br><span class="line">   android:layout_height=<span class="string">"wrap_content"</span></span><br><span class="line">   android:layout_width=<span class="string">"match_parent"</span></span><br><span class="line">   style=<span class="string">"@style/MyCustomTabLayout"</span></span><br><span class="line">   /&gt;</span><br><span class="line">&lt;android<span class="class">.support</span><span class="class">.v4</span><span class="class">.view</span><span class="class">.ViewPager</span></span><br><span class="line">   android:id=<span class="string">"@+id/viewpager"</span></span><br><span class="line">   android:layout_height=<span class="string">"match_parent"</span></span><br><span class="line">   android:layout_width=<span class="string">"match_parent"</span></span><br><span class="line">   /&gt;</span><br></pre></td></tr></table></figure>
<h5 id="TabLayout_Style">TabLayout Style</h5><p><code>MyCustomTabLayout</code>是自定义的 TabLayout 样式。各个选项的功能很容易从字面上理解。可以设置文字选择之后的颜色，指示线的颜色等。</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;style <span class="property">name</span>=<span class="string">"MyCustomTabLayout"</span> parent=<span class="string">"Widget.Design.TabLayout"</span>&gt;</span><br><span class="line">   &lt;<span class="property">item</span> <span class="property">name</span>=<span class="string">"tabIndicatorColor"</span>&gt;?attr/colorAccent&lt;/<span class="property">item</span>&gt;</span><br><span class="line">   &lt;<span class="property">item</span> <span class="property">name</span>=<span class="string">"tabIndicatorHeight"</span>&gt;<span class="number">2</span>dp&lt;/<span class="property">item</span>&gt;</span><br><span class="line">   &lt;<span class="property">item</span> <span class="property">name</span>=<span class="string">"tabPaddingStart"</span>&gt;<span class="number">12</span>dp&lt;/<span class="property">item</span>&gt;</span><br><span class="line">   &lt;<span class="property">item</span> <span class="property">name</span>=<span class="string">"tabPaddingEnd"</span>&gt;<span class="number">12</span>dp&lt;/<span class="property">item</span>&gt;</span><br><span class="line">   &lt;<span class="property">item</span> <span class="property">name</span>=<span class="string">"tabBackground"</span>&gt;?android:colorPrimary&lt;/<span class="property">item</span>&gt;</span><br><span class="line">   &lt;<span class="property">item</span> <span class="property">name</span>=<span class="string">"tabTextAppearance"</span>&gt;@style/MyCustomTabTextAppearance&lt;/<span class="property">item</span>&gt;</span><br><span class="line">   &lt;<span class="property">item</span> <span class="property">name</span>=<span class="string">"tabSelectedTextColor"</span>&gt;?android:colorPrimary&lt;/<span class="property">item</span>&gt;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;style <span class="property">name</span>=<span class="string">"MyCustomTabTextAppearance"</span> parent=<span class="string">"TextAppearance.Design.Tab"</span>&gt;</span><br><span class="line">   &lt;<span class="property">item</span> <span class="property">name</span>=<span class="string">"android:textSize"</span>&gt;<span class="number">14</span>sp&lt;/<span class="property">item</span>&gt;</span><br><span class="line">   &lt;<span class="property">item</span> <span class="property">name</span>=<span class="string">"android:textColor"</span>&gt;?android:textColorSecondary&lt;/<span class="property">item</span>&gt;</span><br><span class="line">   &lt;<span class="property">item</span> <span class="property">name</span>=<span class="string">"textAllCaps"</span>&gt;<span class="constant">false</span>&lt;/<span class="property">item</span>&gt; &lt;!<span class="comment">--文本大写--&gt;</span></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<h4 id="ViewPager">ViewPager</h4><p>ViewPager 里面包含三个 Fragment 用来展示内容。</p>
<h5 id="Fragment">Fragment</h5><p>每个 Fragment 里面只有一个 TextView。</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewpaperFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span>  </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TextView tvViewpager;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String INDEX = <span class="string">"index"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mPage;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function">ViewpaperFragment <span class="title">newInstance</span><span class="params">(<span class="keyword">int</span> page)</span> </span>&#123;</span><br><span class="line">        Bundle args = <span class="keyword">new</span> Bundle();</span><br><span class="line">        args.putInt(INDEX, page);</span><br><span class="line">        ViewpaperFragment fragment = <span class="keyword">new</span> ViewpaperFragment();</span><br><span class="line">        fragment.setArguments(args);</span><br><span class="line">        <span class="keyword">return</span> fragment;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        mPage = getArguments().getInt(INDEX);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function">View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container,</span><br><span class="line">                             Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">return</span> inflater.<span class="title">inflate</span><span class="params">(R.layout.viewpaper, <span class="keyword">null</span>)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onViewCreated</span><span class="params">(View view, Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onViewCreated(view, savedInstanceState);</span><br><span class="line"></span><br><span class="line">        tvViewpager = (TextView) view.findViewById(R.id.tv_viewpager);</span><br><span class="line">        tvViewpager.setText(<span class="string">"Tab "</span> + mPage);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="FragmentPagerAdapter">FragmentPagerAdapter</h5><p>在 FragmentPagerAdapter 里面添加 ViewPager 的页面，并添加 TabLayout 的 Tab 选项。</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewPagerAdapter</span> <span class="keyword">extends</span> <span class="title">FragmentPagerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Context mContext;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String[] tabTitle = &#123;<span class="string">"TAB1"</span>,<span class="string">"TAB2"</span>,<span class="string">"TAB3"</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] tabIcon = &#123;</span><br><span class="line">            R.drawable.selector_icon1,</span><br><span class="line">            R.drawable.selector_icon2,</span><br><span class="line">            R.drawable.selector_icon3&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ViewPagerAdapter</span><span class="params">(FragmentManager fm,Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(fm);</span><br><span class="line">        <span class="keyword">this</span>.mContext = context;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function">Fragment <span class="title">getItem</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">return</span> ViewpaperFragment.<span class="title">newInstance</span><span class="params">(position+<span class="number">1</span>)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function">CharSequence <span class="title">getPageTitle</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//return super.getPageTitle(position);</span></span><br><span class="line">        <span class="keyword">return</span> tabTitle[position];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其实只要注意 <code>getPageTitle</code> 方法就好了，这里面设置了 Tab 的显示内容。</p>
<h5 id="设置_TabLayout">设置 TabLayout</h5><figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">adapter = new ViewPagerAdapter<span class="params">(</span><br><span class="line">      getActivity<span class="params">()</span>.getSupportFragmentManager<span class="params">()</span>, getActivity<span class="params">()</span>)</span>;</span><br><span class="line">mViewPager.setAdapter<span class="params">(adapter)</span>;</span><br><span class="line">mTabLayout.setupWithViewPager<span class="params">(mViewPager)</span>;</span><br></pre></td></tr></table></figure>
<p><code>setupWithViewPager</code> 之后带文本的 Tab 就会跟随 ViewPager 的滑动而改变。</p>
<h3 id="TabLayout－Icon_预览">TabLayout－Icon 预览</h3><p><img src="http://7xluln.com1.z0.glb.clouddn.com/android_support_design_tablayouttab_icon.gif" alt=""></p>
<h4 id="Icon">Icon</h4><p>使用图标类型的 Tab，只要更改 <code>getPageTitle</code> 方法。</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line"><span class="keyword">public</span> CharSequence getPageTitle(<span class="built_in">int</span> position) &#123;</span><br><span class="line"></span><br><span class="line">   Drawable <span class="built_in">image</span> = mContext.getResources().getDrawable(tabIcon[position]);</span><br><span class="line">   <span class="built_in">image</span>.setBounds(<span class="number">0</span>, <span class="number">0</span>, <span class="built_in">image</span>.getIntrinsicWidth(), <span class="built_in">image</span>.getIntrinsicHeight());</span><br><span class="line">   SpannableString sb = <span class="keyword">new</span> SpannableString(<span class="string">" "</span>);</span><br><span class="line">   ImageSpan imageSpan = <span class="keyword">new</span> ImageSpan(<span class="built_in">image</span>, ImageSpan.ALIGN_BOTTOM);</span><br><span class="line">   sb.setSpan(imageSpan, <span class="number">0</span>, <span class="number">1</span>, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);</span><br><span class="line">   <span class="keyword">return</span> sb;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="TabLayout－自定义预览">TabLayout－自定义预览</h3><p><img src="http://7xluln.com1.z0.glb.clouddn.com/android_support_design_tablayouttab_icon_text.gif" alt=""></p>
<h4 id="自定义的_Tab_布局">自定义的 Tab 布局</h4><p>布局很常见，就是上面图标，下面文字。</p>
<figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;LinearLayout xmlns:<span class="variable">android=</span><span class="string">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    android:<span class="variable">orientation=</span><span class="string">"vertical"</span> android:<span class="variable">layout_width=</span><span class="string">"match_parent"</span></span><br><span class="line">    android:<span class="variable">gravity=</span><span class="string">"center"</span></span><br><span class="line">    android:<span class="variable">layout_height=</span><span class="string">"match_parent"</span>&gt;</span><br><span class="line">    &lt;ImageView</span><br><span class="line">        android:<span class="variable">id=</span><span class="string">"@+id/tab_icon"</span></span><br><span class="line">        android:<span class="variable">layout_width=</span><span class="string">"wrap_content"</span></span><br><span class="line">        android:<span class="variable">layout_height=</span><span class="string">"wrap_content"</span></span><br><span class="line">        android:<span class="variable">padding=</span><span class="string">"2dp"</span></span><br><span class="line">        android:<span class="variable">src=</span><span class="string">"@drawable/ic_action_filter_1"</span></span><br><span class="line">        /&gt;</span><br><span class="line">    &lt;TextView</span><br><span class="line">        android:<span class="variable">id=</span><span class="string">"@+id/tab_text"</span></span><br><span class="line">        android:<span class="variable">text=</span><span class="string">"TAB 1"</span></span><br><span class="line">        android:<span class="variable">textSize=</span><span class="string">"12sp"</span></span><br><span class="line">        android:<span class="variable">textColor=</span><span class="string">"@color/selector_text"</span></span><br><span class="line">        android:<span class="variable">layout_width=</span><span class="string">"wrap_content"</span></span><br><span class="line">        android:<span class="variable">layout_height=</span><span class="string">"wrap_content"</span> /&gt;</span><br><span class="line">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这里有个系统的 id，ImageView 的是 icon，TextView 的是 text1，直接使用这个 id 的话，直接可以使用 <code>tab.setText()</code> 和 <code>tab.setIcon()</code> 来设置图标和文字。</p>
</blockquote>
<h4 id="设置图标文字选中颜色">设置图标文字选中颜色</h4><p>像往常一样，选中状态写的 seletor 就可以，类似这样。文字的更改一下颜色。</p>
<figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml <span class="variable">version=</span><span class="string">"1.0"</span> <span class="variable">encoding=</span><span class="string">"utf-8"</span>?&gt;</span><br><span class="line">&lt;selector xmlns:<span class="variable">android=</span><span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span><br><span class="line">    &lt;item</span><br><span class="line">        android:<span class="variable">left=</span><span class="string">"2dp"</span> android:<span class="variable">right=</span><span class="string">"4dp"</span></span><br><span class="line">        android:<span class="variable">state_focused=</span><span class="string">"false"</span></span><br><span class="line">        android:<span class="variable">state_selected=</span><span class="string">"false"</span></span><br><span class="line">        android:<span class="variable">state_pressed=</span><span class="string">"false"</span></span><br><span class="line">        android:<span class="variable">drawable=</span><span class="string">"@drawable/ic_action_filter_1"</span> /&gt;</span><br><span class="line">    &lt;item</span><br><span class="line">        android:<span class="variable">left=</span><span class="string">"2dp"</span> android:<span class="variable">right=</span><span class="string">"4dp"</span></span><br><span class="line">        android:<span class="variable">state_focused=</span><span class="string">"false"</span></span><br><span class="line">        android:<span class="variable">state_selected=</span><span class="string">"true"</span></span><br><span class="line">        android:<span class="variable">state_pressed=</span><span class="string">"false"</span></span><br><span class="line">        android:<span class="variable">drawable=</span><span class="string">"@drawable/ic_action_filter_1_s"</span> /&gt;</span><br><span class="line">    &lt;item</span><br><span class="line">        android:<span class="variable">left=</span><span class="string">"2dp"</span> android:<span class="variable">right=</span><span class="string">"4dp"</span></span><br><span class="line">        android:<span class="variable">state_focused=</span><span class="string">"true"</span></span><br><span class="line">        android:<span class="variable">state_selected=</span><span class="string">"false"</span></span><br><span class="line">        android:<span class="variable">state_pressed=</span><span class="string">"false"</span></span><br><span class="line">        android:<span class="variable">drawable=</span><span class="string">"@drawable/ic_action_filter_1_s"</span> /&gt;</span><br><span class="line">    &lt;item</span><br><span class="line">        android:<span class="variable">left=</span><span class="string">"2dp"</span> android:<span class="variable">right=</span><span class="string">"4dp"</span></span><br><span class="line">        android:<span class="variable">state_focused=</span><span class="string">"true"</span></span><br><span class="line">        android:<span class="variable">state_selected=</span><span class="string">"true"</span></span><br><span class="line">        android:<span class="variable">state_pressed=</span><span class="string">"false"</span></span><br><span class="line">        android:<span class="variable">drawable=</span><span class="string">"@drawable/ic_action_filter_1_s"</span> /&gt;</span><br><span class="line">    &lt;item</span><br><span class="line">        android:<span class="variable">left=</span><span class="string">"2dp"</span> android:<span class="variable">right=</span><span class="string">"4dp"</span></span><br><span class="line">        android:<span class="variable">state_pressed=</span><span class="string">"true"</span></span><br><span class="line">        android:<span class="variable">drawable=</span><span class="string">"@drawable/ic_action_filter_1_s"</span> /&gt;</span><br><span class="line">&lt;/selector&gt;</span><br></pre></td></tr></table></figure>
<h4 id="设置_Tab">设置 Tab</h4><p>注释之前的 <code>getPageTitle</code> 方法，增加 <code>getTabView</code> 方法。</p>
<figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public View getTabView<span class="params">(int position,TabLayout.Tab tab)</span>&#123;</span><br><span class="line"></span><br><span class="line">   View v = LayoutInflater.from<span class="params">(mContext)</span>.inflate<span class="params">(R.layout.layout_coutom_tab,null)</span>;</span><br><span class="line">   ImageView img = <span class="params">(ImageView)</span>v.findViewById<span class="params">(R.id.tab_icon)</span>;</span><br><span class="line">   img.setImageResource<span class="params">(tabIcon[position])</span>;</span><br><span class="line">   TextView tv = <span class="params">(TextView)</span>v.findViewById<span class="params">(R.id.tab_text)</span>;</span><br><span class="line">   tv.setText<span class="params">(tabTitle[position])</span>;</span><br><span class="line">   <span class="keyword">if</span><span class="params">(position == <span class="number">0</span>)</span>&#123;</span><br><span class="line">       v.setSelected<span class="params">(<span class="literal">true</span>)</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   return v;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里给每一个 tab 设置文字和图标。</p>
<h4 id="设置_CustomView">设置 CustomView</h4><p>给每一个 Tab 设置自定义的布局。</p>
<figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for<span class="comment">(int i=0;i&lt;mTabLayout.getTabCount()</span>;i++)&#123;</span><br><span class="line">    TabLayout.Tab tab = mTabLayout.getTabAt<span class="comment">(i)</span>;</span><br><span class="line">    tab.setCustomView<span class="comment">(adapter.getTabView(i,tab)</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<h3 id="Tab_不显示问题">Tab 不显示问题</h3><p>这个是之后补充的。在写后面文章的时候，更改了一下 xml 里面的显示布局，运行之后发现 tab 竟然不显示了。开始以为是被标题栏遮挡住了，试过 <code>android:fitsSystemWindows=&quot;true&quot;</code> 和设置高度都不行。最后找到了解决方式。</p>
<figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="params">(ViewCompat.isLaidOut<span class="params">(mTabLayout)</span>)</span> &#123;</span><br><span class="line">  mTabLayout.setupWithViewPager<span class="params">(mViewPager)</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  mTabLayout.addOnLayoutChangeListener<span class="params">(new View.OnLayoutChangeListener<span class="params">()</span> &#123;</span><br><span class="line">      @Override</span><br><span class="line">      public void onLayoutChange<span class="params">(...)</span> &#123;</span><br><span class="line">          mTabLayout.setupWithViewPager<span class="params">(mViewPager)</span>;</span><br><span class="line">          mTabLayout.removeOnLayoutChangeListener<span class="params">(this)</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个是 TabLayout 计算高度的问题。详细可以<a href="https://code.google.com/p/android/issues/detail?id=180462" target="_blank" rel="external">查看这个</a>。</p>
<h3 id="参考">参考</h3><p><a href="https://guides.codepath.com/android/Google-Play-Style-Tabs-using-TabLayout" target="_blank" rel="external">Google Play Style Tabs using TabLayout</a></p>
<p><a href="http://www.google.com/design/spec/components/buttons-floating-action-button.html" target="_blank" rel="external">Material Design</a></p>
<p><a href="http://www.google.com/design/spec/components/tabs.html#tabs-types-of-tabs" target="_blank" rel="external">Material Design 中文版</a></p>
<h3 id="源码">源码</h3><p><a href="https://github.com/lightlz/DesignSupportLib" target="_blank" rel="external">DesignSupportLib</a> </p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="概述">概述</h3><p>Tab 在手机应用中是相当常见的组件，用来显示有关联的分组内容。Tab 标签能够简要的描述页面内容，好处是有效的进行内容分组和内容导航。TabLayout 是在 Android M 版本中发布出来的，经常和 ViewPager 一起使用，放在标题栏下方。</p>
<blockquote>
<p>发现很多 Android 应用是将 Tab 放在底部的，之前 ActionBar Tab 的时候 Android Design 里面好似有放在底部的，但是 Material Design 中并没有发现放在底部的。</p>
</blockquote>
<p>此处将展示三种类型的 TabLayout，Text 类型，Icon 类型，和自定义的 Tab。</p>]]>
    
    </summary>
    
      <category term="Android Support Design Library" scheme="/tags/Android-Support-Design-Library/"/>
    
      <category term="TabLayout" scheme="/tags/TabLayout/"/>
    
      <category term="自定义 TabLayout" scheme="/tags/%E8%87%AA%E5%AE%9A%E4%B9%89-TabLayout/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android Support Design Library - FAB]]></title>
    <link href="/2015/08/28/Android-Support-Design-Library-FAB/"/>
    <id>/2015/08/28/Android-Support-Design-Library-FAB/</id>
    <published>2015-08-28T08:30:54.000Z</published>
    <updated>2015-09-16T15:05:35.000Z</updated>
    <content type="html"><![CDATA[<h3 id="概述">概述</h3><p>Floating Action Button 很容易就可以理解成浮动操作按钮。名字有点长，就将它简称为 FAB 吧。当时 IO 大会推出 MD 设计规范的时候，FAB 是令我印象比较深刻的。比较喜欢它那鲜艳的粉色（高亮色），很容易在进入界面的时候，就明白这个界面的有一个主要操作。</p>
<p>MD 文档里面出现了几种相关的 FAB 应用，点击出现工具栏，点击出现单页选项或者添加布局等。</p>
<a id="more"></a>
<h3 id="普通_FAB_预览">普通 FAB 预览</h3><p><img src="fab.gif" alt=""></p>
<h3 id="使用">使用</h3><h4 id="Dependencies">Dependencies</h4><p>前提条件得满足。</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">compile</span> <span class="string">'com.android.support:design:22.2.1'</span></span><br><span class="line"><span class="keyword">compile</span> <span class="string">'com.android.support:appcompat-v7:22.2.1'</span></span><br></pre></td></tr></table></figure>
<h4 id="fab">fab</h4><p>在 xml 文件里面声明 fab，这里使用了 scrollView。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;android<span class="class">.support</span><span class="class">.design</span><span class="class">.widget</span><span class="class">.CoordinatorLayout</span></span><br><span class="line">android:id=<span class="string">"@+id/main_content"</span></span><br><span class="line">xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">xmlns:app=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span><br><span class="line">android:layout_width=<span class="string">"match_parent"</span></span><br><span class="line">android:layout_height=<span class="string">"match_parent"</span>&gt;</span><br><span class="line"></span><br><span class="line">	&lt;ScrollView	</span><br><span class="line">		...</span><br><span class="line">	/&gt;</span><br><span class="line">   &lt;android<span class="class">.support</span><span class="class">.design</span><span class="class">.widget</span><span class="class">.FloatingActionButton</span></span><br><span class="line">       android:id=<span class="string">"@+id/fab"</span></span><br><span class="line">       android:layout_width=<span class="string">"wrap_content"</span></span><br><span class="line">       android:layout_height=<span class="string">"wrap_content"</span></span><br><span class="line">       android:layout_margin=<span class="string">"16dp"</span></span><br><span class="line">       android:src=<span class="string">"@drawable/ic_action_add"</span></span><br><span class="line">       app:layout_anchor=<span class="string">"@id/scrollView"</span></span><br><span class="line">       app:layout_anchorGravity=<span class="string">"bottom|right|end"</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;/android<span class="class">.support</span><span class="class">.design</span><span class="class">.widget</span><span class="class">.CoordinatorLayout</span>&gt;</span><br></pre></td></tr></table></figure>
<p><code>app:layout_anchor</code> 和 <code>app:layout_anchorGravity</code>用来固定位置，可以让 FAB 固定在两个 Layout 的交接处。</p>
<h4 id="滚动隐藏">滚动隐藏</h4><p>API 有提供 <code>fab.show()</code>和 <code>fab.hide()</code>方法，并带有动画效果。</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">mScrollView = (ScrollView)view.findViewById(R.id.scrollView);</span><br><span class="line"></span><br><span class="line">  mScrollView.setOnTouchListener(<span class="keyword">new</span> View.OnTouchListener() &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> lastY = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> touchEventId = -<span class="number">9983761</span>;</span><br><span class="line">  Handler <span class="keyword">handler</span> = <span class="keyword">new</span> Handler() &#123;</span><br><span class="line">      <span class="annotation">@Override</span></span><br><span class="line">      <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">          <span class="keyword">super</span>.handleMessage(msg);</span><br><span class="line">          View scroller = (View) msg.obj;</span><br><span class="line">          mFab.show();</span><br><span class="line">          <span class="keyword">if</span> (msg.what == touchEventId) &#123;</span><br><span class="line"></span><br><span class="line">              <span class="keyword">if</span> (lastY == scroller.getScrollY()) &#123;</span><br><span class="line">                  mFab.show();</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                  <span class="keyword">handler</span>.sendMessageDelayed(<span class="keyword">handler</span>.obtainMessage(touchEventId, scroller), <span class="number">10</span>);</span><br><span class="line">                  lastY = scroller.getScrollY();</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onTouch</span><span class="params">(View v, MotionEvent event)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (event.getAction() == MotionEvent.ACTION_UP) &#123;</span><br><span class="line">          <span class="keyword">handler</span>.sendMessageDelayed(<span class="keyword">handler</span>.obtainMessage(touchEventId, v), <span class="number">10</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(event.getAction() == MotionEvent.ACTION_MOVE)&#123;</span><br><span class="line">          mFab.hide();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>只是监听下 onTouch 事件，让点击和滚动的时候让 fab 隐藏。</p>
<blockquote>
<p>正常好像是继承 <code>FloatingActionButton.Behavior</code> 来实现这样的效果，详细可以查看 <a href="https://guides.codepath.com/android/Floating-Action-Buttons#converting-from-listview-to-recyclerview" target="_blank" rel="external">Using CoordinatorLayout</a>。以上的滚动消失方式错误还是蛮多。</p>
</blockquote>
<h3 id="FAB_第三方库">FAB 第三方库</h3><p>FAB 实现的相关功能，此处都是用这个库 <a href="https://github.com/konifar/fab-transformation" target="_blank" rel="external">fab-transformation</a> 实现的。</p>
<h4 id="效果预览">效果预览</h4><h5 id="FAB_-_Toolbar">FAB - Toolbar</h5><p><img src="fab_toolbar.gif" alt=""></p>
<h5 id="FAB_-_Sheet">FAB - Sheet</h5><p><img src="fab_sheet.gif" alt=""></p>
<h5 id="FAB_-_Layout">FAB - Layout</h5><p><img src="fab_layout.gif" alt=""></p>
<h4 id="使用方式">使用方式</h4><p>三种效果都需要使用 <code>RevealFrameLayout</code>。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;io<span class="class">.codetail</span><span class="class">.widget</span><span class="class">.RevealFrameLayout</span></span><br><span class="line"> android:layout_width=<span class="string">"match_parent"</span></span><br><span class="line"> android:layout_height=<span class="string">"wrap_content"</span></span><br><span class="line"> android:layout_gravity=<span class="string">"bottom"</span>&gt;</span><br><span class="line"></span><br><span class="line"> &lt;android<span class="class">.support</span><span class="class">.v7</span><span class="class">.widget</span><span class="class">.Toolbar</span></span><br><span class="line">     android:id=<span class="string">"@+id/toolbar_footer"</span></span><br><span class="line">     android:layout_width=<span class="string">"match_parent"</span></span><br><span class="line">     android:layout_height=<span class="string">"?attr/actionBarSize"</span></span><br><span class="line">     android:<span class="attribute">visibility</span>=<span class="string">"invisible"</span></span><br><span class="line">     android:<span class="attribute">background</span>=<span class="string">"?attr/colorPrimary"</span>&gt;</span><br><span class="line"></span><br><span class="line">     &lt;include layout=<span class="string">"@layout/toolbar_footer"</span>&gt;&lt;/include&gt;</span><br><span class="line"></span><br><span class="line"> &lt;/android<span class="class">.support</span><span class="class">.v7</span><span class="class">.widget</span><span class="class">.Toolbar</span>&gt;</span><br><span class="line">&lt;/io<span class="class">.codetail</span><span class="class">.widget</span><span class="class">.RevealFrameLayout</span>&gt;</span><br></pre></td></tr></table></figure>
<p>只用替换 <code>RevealFrameLayout</code> 里面包含的布局即可实现。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">FabTransformation</span><span class="class">.with</span>(<span class="tag">fab</span>)<span class="class">.transformTo</span>(<span class="tag">footer</span>);</span><br><span class="line"><span class="tag">FabTransformation</span><span class="class">.with</span>(<span class="tag">fab</span>)<span class="class">.transformFrom</span>(<span class="tag">footer</span>);</span><br></pre></td></tr></table></figure>
<p>用这两种方法可展示或收起点击 FAB 之后的布局。详细使用方式可以查看库的 Sample。</p>
<p>还有一种是类似于快速拨号的 FAB 菜单选项。点击之后弹出一串选项。</p>
<p><img src="screenshop1.png" alt=""></p>
<p>使用的是 <a href="https://github.com/futuresimple/android-floating-action-button" target="_blank" rel="external">android-floating-action-button</a>。这里用作于颜色选择。截图来自于应用 <a href="http://llzz.me/2015/07/15/My-List/" target="_blank" rel="external">MyList</a>。</p>
<h3 id="参考">参考</h3><p><a href="https://guides.codepath.com/android/Floating-Action-Buttons" target="_blank" rel="external">Floating Action Buttons</a></p>
<p><a href="http://www.google.com/design/spec/components/buttons-floating-action-button.html" target="_blank" rel="external">Material Design</a></p>
<p><a href="http://wiki.jikexueyuan.com/project/material-design/components/buttons-floating-action-button.html" target="_blank" rel="external">Material Design 中文版</a></p>
<h3 id="源码">源码</h3><p><a href="https://github.com/lightlz/DesignSupportLib" target="_blank" rel="external">DesignSupportLib</a> </p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="概述">概述</h3><p>Floating Action Button 很容易就可以理解成浮动操作按钮。名字有点长，就将它简称为 FAB 吧。当时 IO 大会推出 MD 设计规范的时候，FAB 是令我印象比较深刻的。比较喜欢它那鲜艳的粉色（高亮色），很容易在进入界面的时候，就明白这个界面的有一个主要操作。</p>
<p>MD 文档里面出现了几种相关的 FAB 应用，点击出现工具栏，点击出现单页选项或者添加布局等。</p>]]>
    
    </summary>
    
      <category term="Android Support Design Library" scheme="/tags/Android-Support-Design-Library/"/>
    
      <category term="FAB" scheme="/tags/FAB/"/>
    
      <category term="FloatingActionButton" scheme="/tags/FloatingActionButton/"/>
    
      <category term="Android" scheme="/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android Support Design Library - NavigationView]]></title>
    <link href="/2015/08/19/Android-Support-Design-Library-NavigationView/"/>
    <id>/2015/08/19/Android-Support-Design-Library-NavigationView/</id>
    <published>2015-08-19T15:21:58.000Z</published>
    <updated>2015-09-06T12:54:37.000Z</updated>
    <content type="html"><![CDATA[<h3 id="概述">概述</h3><p>Navigation Drawer 是应用程序中一种常见的模式。它从左侧滑出，遵循列表的关键设计线和标准。在 <a href="http://www.google.com/design/spec/patterns/navigation-drawer.html#navigation-drawer-content" target="_blank" rel="external">Material Design</a> 中，有好几种 Navigation 的样式，有全屏高度的，ActionBar 覆盖的，悬浮的，还有 Mini 类型的。</p>
<p>NavigationView 是 Google IO 2015 上发布的，它能让我们更容易的创建导航栏。</p>
<a id="more"></a>
<h3 id="预览">预览</h3><p><img src="view.gif" alt=""></p>
<h3 id="使用">使用</h3><h4 id="Dependencies">Dependencies</h4><p>前提条件得满足。</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">compile</span> <span class="string">'com.android.support:design:22.2.1'</span></span><br><span class="line"><span class="keyword">compile</span> <span class="string">'com.android.support:appcompat-v7:22.2.1'</span></span><br></pre></td></tr></table></figure>
<h4 id="Theme">Theme</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;style name=<span class="string">"AppTheme"</span> parent=<span class="string">"Theme.AppCompat.Light.NoActionBar"</span>&gt;</span><br><span class="line">  &lt;item name=<span class="string">"colorPrimary"</span>&gt;<span class="hexcolor">#3F51B5</span>&lt;/item&gt;</span><br><span class="line">  &lt;item name=<span class="string">"colorPrimaryDark"</span>&gt;<span class="hexcolor">#303F9F</span>&lt;/item&gt;</span><br><span class="line">  &lt;item name=<span class="string">"colorAccent"</span>&gt;<span class="hexcolor">#9E9E9E</span>&lt;/item&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<p>因为使用的 Toolbar 所以设置了 NoActionBar。自定义的属性对应位置可以看这张图。</p>
<p><img src="theme.png" alt=""></p>
<p>关于 Material Design 色彩的选取，有一个很帅的地方 <a href="http://www.materialpalette.com" target="_blank" rel="external">Material Palette</a>。</p>
<blockquote>
<p>Android 4.4 之后可以将状态栏更改成透明的。新建 values-v19/styles.xml，添加<code>&lt;item name=&quot;android:windowTranslucentStatus&quot;&gt;true&lt;/item&gt;</code></p>
</blockquote>
<h4 id="Toolbar">Toolbar</h4><p>使用的标题栏，创建一个 <code>toolbar.xml</code>。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;android<span class="class">.support</span><span class="class">.v7</span><span class="class">.widget</span><span class="class">.Toolbar</span></span><br><span class="line">    xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    xmlns:app=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span><br><span class="line">    android:id=<span class="string">"@+id/toolbar"</span></span><br><span class="line">    android:layout_width=<span class="string">"match_parent"</span></span><br><span class="line">    android:fitsSystemWindows=<span class="string">"true"</span></span><br><span class="line">    android:layout_height=<span class="string">"?attr/actionBarSize"</span></span><br><span class="line">    app:popupTheme=<span class="string">"@style/ThemeOverlay.AppCompat.Light"</span></span><br><span class="line">    android:<span class="attribute">background</span>=<span class="string">"?attr/colorPrimary"</span>&gt;</span><br><span class="line">&lt;/android<span class="class">.support</span><span class="class">.v7</span><span class="class">.widget</span><span class="class">.Toolbar</span>&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>android:fitsSystemWindows=”true”  如果不设置成 true 的话，状态栏将会覆盖到 toolbar 上</p>
</blockquote>
<p>在 Activity 中设置 Toolbar。</p>
<figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Toolbar</span></span><br><span class="line">   toolbar = <span class="params">(Toolbar)</span> findViewById<span class="params">(R.id.toolbar)</span>;</span><br><span class="line">   setSupportActionBar<span class="params">(toolbar)</span>;</span><br><span class="line">   </span><br><span class="line">   final ActionBar ab = getSupportActionBar<span class="params">()</span>;</span><br><span class="line">   ab.setDisplayHomeAsUpEnabled<span class="params">(<span class="literal">true</span>)</span></span><br></pre></td></tr></table></figure>
<h4 id="DrawerLayout_&amp;_NavigationView">DrawerLayout &amp; NavigationView</h4><p>DrawerLayout 是整个抽屉布局，NavigationView 是左滑出来的导航栏。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">android.support.v4.widget.DrawerLayout</span></span><br><span class="line">   <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">   <span class="attribute">xmlns:app</span>=<span class="value">"http://schemas.android.com/apk/res-auto"</span></span><br><span class="line">   <span class="attribute">android:id</span>=<span class="value">"@+id/drawer_layout"</span></span><br><span class="line">   <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">   <span class="attribute">android:layout_height</span>=<span class="value">"match_parent"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="title">LinearLayout</span></span><br><span class="line">       <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">       <span class="attribute">android:layout_height</span>=<span class="value">"match_parent"</span></span><br><span class="line">       <span class="attribute">android:orientation</span>=<span class="value">"vertical"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="title">android.support.design.widget.AppBarLayout</span></span><br><span class="line">           <span class="attribute">android:id</span>=<span class="value">"@+id/appbar"</span></span><br><span class="line">           <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">           <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">           <span class="attribute">android:theme</span>=<span class="value">"@style/ThemeOverlay.AppCompat.Dark.ActionBar"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">           <span class="tag">&lt;<span class="title">include</span></span><br><span class="line">               <span class="attribute">layout</span>=<span class="value">"@layout/toolbar"</span></span><br><span class="line">               <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">               <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;/<span class="title">android.support.design.widget.AppBarLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!-- content view --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="title">FrameLayout</span></span><br><span class="line">           <span class="attribute">android:id</span>=<span class="value">"@+id/flContent"</span></span><br><span class="line">           <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">           <span class="attribute">android:layout_height</span>=<span class="value">"match_parent"</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="title">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- The navigation drawer --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="title">android.support.design.widget.NavigationView</span></span><br><span class="line">       <span class="attribute">android:id</span>=<span class="value">"@+id/navigation_view"</span></span><br><span class="line">       <span class="attribute">android:layout_width</span>=<span class="value">"wrap_content"</span></span><br><span class="line">       <span class="attribute">android:layout_height</span>=<span class="value">"match_parent"</span></span><br><span class="line">       <span class="attribute">android:layout_gravity</span>=<span class="value">"start"</span></span><br><span class="line">       <span class="attribute">android:background</span>=<span class="value">"@android:color/white"</span></span><br><span class="line">       <span class="attribute">app:headerLayout</span>=<span class="value">"@layout/navigation_header"</span></span><br><span class="line">       <span class="attribute">app:menu</span>=<span class="value">"@menu/drawer"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">android.support.v4.widget.DrawerLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>结构很明显，主页面有 Toolbar 和内容 Fragment，之后就是 NavigationView。</p>
<p>这里主要是 NavigationView，分为 2 部分，header 和 menu。</p>
<h5 id="header">header</h5><p><img src="header.png" alt=""></p>
<p>这里的布局没有什么特别的，就一个 ImageView 和 TextView。</p>
<h5 id="menu">menu</h5><p><img src="menu.png" alt=""></p>
<p>这里不是在 layout 里面写的，新建 <code>menu/drawer</code> 。</p>
<figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;group android:<span class="variable">checkableBehavior=</span><span class="string">"single"</span>&gt;</span><br><span class="line">   &lt;item</span><br><span class="line">       android:<span class="variable">id=</span><span class="string">"@+id/nav_first"</span></span><br><span class="line">       android:<span class="variable">icon=</span><span class="string">"@drawable/ic_action_brightness_1"</span></span><br><span class="line">       android:<span class="variable">title=</span><span class="string">"First"</span> /&gt;</span><br><span class="line">   &lt;item</span><br><span class="line">       android:<span class="variable">id=</span><span class="string">"@+id/nav_second"</span></span><br><span class="line">       android:<span class="variable">icon=</span><span class="string">"@drawable/ic_action_brightness_1"</span></span><br><span class="line">       android:<span class="variable">title=</span><span class="string">"Second"</span> /&gt;</span><br><span class="line">   &lt;item</span><br><span class="line">       android:<span class="variable">id=</span><span class="string">"@+id/nav_third"</span></span><br><span class="line">       android:<span class="variable">icon=</span><span class="string">"@drawable/ic_action_brightness_1"</span></span><br><span class="line">       android:<span class="variable">title=</span><span class="string">"Third"</span> /&gt;</span><br><span class="line">&lt;/group&gt;</span><br><span class="line"></span><br><span class="line">&lt;item android:<span class="variable">title=</span><span class="string">"Sub items"</span>&gt;</span><br><span class="line">   &lt;menu&gt;</span><br><span class="line">       &lt;item</span><br><span class="line">           android:<span class="variable">icon=</span><span class="string">"@drawable/ic_action_1"</span></span><br><span class="line">           android:<span class="variable">title=</span><span class="string">"Sub item 1"</span> /&gt;</span><br><span class="line">       &lt;item</span><br><span class="line">           android:<span class="variable">icon=</span><span class="string">"@drawable/ic_action_filter_2"</span></span><br><span class="line">           android:<span class="variable">title=</span><span class="string">"Sub item 2"</span> /&gt;</span><br><span class="line">   &lt;/menu&gt;</span><br><span class="line">&lt;/item&gt;</span><br></pre></td></tr></table></figure>
<p>关于上面的图标，这里是用 Android Drawable Importer 插件导入的 Material Icon，此插件的使用方式可以查看 <a href="http://llzz.me/2015/07/17/Android-Studio-Plugins/" target="_blank" rel="external">Android Studio Plugins</a>。</p>
<p>这里的 Item 选项点击之后会直接显示 Theme 那里设置的颜色，很方便，但也有限制，就是没找到方法去更改它的颜色状态。</p>
<h4 id="ActionBarDrawerToggle">ActionBarDrawerToggle</h4><p>这个是很帅的微交互，点击菜单之后菜单会有旋转动画。它实现了 DrawerLayout.DrawerListener。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> ActionBarDrawerToggle <span class="title">setupDrawerToggle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> ActionBarDrawerToggle(<span class="keyword">this</span>, mDrawer, toolbar, R.<span class="built_in">string</span>.drawer_open,  R.<span class="built_in">string</span>.drawer_close);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>之后需要在点击菜单按钮和页面更改重载的时候改变状态。</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onPostCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">super</span>.onPostCreate(savedInstanceState);</span><br><span class="line">   drawerToggle.syncState();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onConfigurationChanged</span><span class="params">(Configuration newConfig)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">super</span>.onConfigurationChanged(newConfig);</span><br><span class="line">   drawerToggle.onConfigurationChanged(newConfig);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onOptionsItemSelected</span><span class="params">(MenuItem item)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (drawerToggle.onOptionsItemSelected(item)) &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">return</span> <span class="keyword">super</span>.<span class="title">onOptionsItemSelected</span><span class="params">(item)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>DrawerLayout 中使用它。</p>
<figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">drawerToggle = setupDrawerToggle()<span class="comment">;</span></span><br><span class="line">mDrawer.setDrawerListener(drawerToggle)<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<h4 id="Fragment">Fragment</h4><p>这里使用了 3 个 Fragment 用于页面切换。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置 drawer 内容</span></span><br><span class="line"><span class="keyword">private</span> <span class="typename">void</span> setDrawerContent(NavigationView view)&#123;</span><br><span class="line"></span><br><span class="line">   view.setNavigationItemSelectedListener(<span class="keyword">new</span> NavigationView.OnNavigationItemSelectedListener() &#123;</span><br><span class="line">       <span class="annotation">@Override</span></span><br><span class="line">       <span class="keyword">public</span> <span class="typename">boolean</span> onNavigationItemSelected(MenuItem menuItem) &#123;</span><br><span class="line">           changeFragmentContent(menuItem);</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更改 fragment 内容</span></span><br><span class="line"><span class="keyword">private</span> <span class="typename">void</span> changeFragmentContent(MenuItem menuItem)&#123;</span><br><span class="line"></span><br><span class="line">   Fragment fragment = <span class="literal">null</span>;</span><br><span class="line">   Class fragmentClass = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">switch</span> (menuItem.getItemId())&#123;</span><br><span class="line">       <span class="keyword">case</span> R.id.<span class="string">nav_first:</span></span><br><span class="line">           fragmentClass = FirstFragment.<span class="keyword">class</span>;</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">case</span> R.id.<span class="string">nav_second:</span></span><br><span class="line">           fragmentClass = SecordFragment.<span class="keyword">class</span>;</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">case</span> R.id.<span class="string">nav_third:</span></span><br><span class="line">           fragmentClass = ThirdFragment.<span class="keyword">class</span>;</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">       fragment = (Fragment) fragmentClass.newInstance();</span><br><span class="line">   &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">       e.printStackTrace();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   FragmentManager fragmentManager = getSupportFragmentManager();</span><br><span class="line">   fragmentManager.beginTransaction().replace(R.id.flContent, fragment).commit();</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 选中高亮</span></span><br><span class="line">   menuItem.setChecked(<span class="literal">true</span>);</span><br><span class="line">   setTitle(menuItem.getTitle());</span><br><span class="line">   mDrawer.closeDrawers();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>每次点击导航栏的选项则切换 Fragment，并设置 item 的选中状态。然后绑定 NavigationView。</p>
<figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 点击导航栏选项，切换 fragment</span></span><br><span class="line">mNavigationView = <span class="params">(NavigationView)</span>findViewById<span class="params">(R.id.navigation_view)</span>;</span><br><span class="line">setDrawerContent<span class="params">(mNavigationView)</span>;</span><br></pre></td></tr></table></figure>
<h3 id="参考">参考</h3><p><a href="https://guides.codepath.com/android/Fragment-Navigation-Drawer" target="_blank" rel="external">Fragment-Navigation-Drawer</a></p>
<p><a href="http://www.google.com/design/spec/patterns/navigation-drawer.html" target="_blank" rel="external">Material Design</a></p>
<p><a href="http://wiki.jikexueyuan.com/project/material-design/patterns/navigation-drawer.html" target="_blank" rel="external">Material Design 中文版</a></p>
<h3 id="源码">源码</h3><p><a href="https://github.com/lightlz/DesignSupportLib" target="_blank" rel="external">DesignSupportLib</a> </p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="概述">概述</h3><p>Navigation Drawer 是应用程序中一种常见的模式。它从左侧滑出，遵循列表的关键设计线和标准。在 <a href="http://www.google.com/design/spec/patterns/navigation-drawer.html#navigation-drawer-content">Material Design</a> 中，有好几种 Navigation 的样式，有全屏高度的，ActionBar 覆盖的，悬浮的，还有 Mini 类型的。</p>
<p>NavigationView 是 Google IO 2015 上发布的，它能让我们更容易的创建导航栏。</p>]]>
    
    </summary>
    
      <category term="Android Support Design Library" scheme="/tags/Android-Support-Design-Library/"/>
    
      <category term="NavigationView" scheme="/tags/NavigationView/"/>
    
      <category term="Android" scheme="/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[NDK With Android Studio]]></title>
    <link href="/2015/08/10/NDK-With-Android-Studio/"/>
    <id>/2015/08/10/NDK-With-Android-Studio/</id>
    <published>2015-08-10T14:23:32.000Z</published>
    <updated>2015-08-12T15:03:15.000Z</updated>
    <content type="html"><![CDATA[<p>首先说明的是，Android Stuido 1.3 对 NDK 的支持是不完善的，感觉比 Eclipse 差很多，但是趋势来看，这样的使用方式将会方便很多。</p>
<h4 id="当前环境">当前环境</h4><ul>
<li>OS X Yosemite</li>
<li>Android Studio 1.3.1</li>
<li>NDK r10e</li>
<li>SDK 22</li>
</ul>
<h4 id="配置_NDK">配置 NDK</h4><p>在 <code>local.properties</code> 配置 NDK</p>
<figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ndk.<span class="built_in">dir</span>=/your-ndk-<span class="built_in">path</span>/android-ndk-r10e</span><br></pre></td></tr></table></figure>
<h4 id="Gradle">Gradle</h4><p>Gradle 使用的是 experimental ，版本要 2.5。</p>
<h5 id="gradle-wrapper_更改">gradle-wrapper 更改</h5><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">distributionUrl=https\<span class="symbol">://services</span>.gradle.org/distributions/gradle-<span class="number">2.5</span>-all.zip</span><br></pre></td></tr></table></figure>
<h5 id="根目录_build-gradle_更改">根目录 build.gradle 更改</h5><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">classpath</span> <span class="string">'com.android.tools.build:gradle-experimental:0.2.0'</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h5 id="app/_目录下的_build-gradle_更改">app/ 目录下的 build.gradle 更改</h5><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: <span class="string">'com.android.model.application'</span></span><br><span class="line">model &#123;</span><br><span class="line">    android &#123;</span><br><span class="line">        compileSdkVersion = <span class="number">21</span></span><br><span class="line">        buildToolsVersion = <span class="string">"22.0.1"</span></span><br><span class="line">        defaultConfig.<span class="operator">with</span> &#123;</span><br><span class="line">            applicationId = <span class="string">"com.light.ndkdemo"</span></span><br><span class="line">            minSdkVersion.apiLevel = <span class="number">15</span></span><br><span class="line">            targetSdkVersion.apiLevel = <span class="number">22</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    android.buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            minifyEnabled = <span class="constant">false</span></span><br><span class="line">            proguardFiles += <span class="built_in">file</span>(<span class="string">'proguard-rules.txt'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    android.ndk &#123;</span><br><span class="line">        moduleName = <span class="string">"JniLibrary"</span></span><br><span class="line">        <span class="comment">/*</span><br><span class="line">         * Other ndk flags configurable here are</span><br><span class="line">         * cppFlags += "-fno-rtti"</span><br><span class="line">         * cppFlags += "-fno-exceptions"</span><br><span class="line">         * ldLibs    = ["android", "log"]</span><br><span class="line">         * stl       = "system"</span><br><span class="line">         */</span></span><br><span class="line">    &#125;</span><br><span class="line">    android.buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            minifyEnabled = <span class="constant">false</span></span><br><span class="line">            proguardFiles  += <span class="built_in">file</span>(<span class="string">'proguard-rules.txt'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    android.productFlavors &#123;</span><br><span class="line">       <span class="comment"> // for detailed abiFilter descriptions, refer to "Supported ABIs" @</span></span><br><span class="line">       <span class="comment"> // https://developer.android.com/ndk/guides/abis.html#sa</span></span><br><span class="line">        <span class="built_in">create</span>(<span class="string">"arm"</span>) &#123;</span><br><span class="line">            ndk.abiFilters += <span class="string">"armeabi"</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">create</span>(<span class="string">"arm7"</span>) &#123;</span><br><span class="line">            ndk.abiFilters += <span class="string">"armeabi-v7a"</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">create</span>(<span class="string">"arm8"</span>) &#123;</span><br><span class="line">            ndk.abiFilters += <span class="string">"arm64-v8a"</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">create</span>(<span class="string">"x86"</span>) &#123;</span><br><span class="line">            ndk.abiFilters += <span class="string">"x86"</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">create</span>(<span class="string">"x86-64"</span>) &#123;</span><br><span class="line">            ndk.abiFilters += <span class="string">"x86_64"</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">create</span>(<span class="string">"mips"</span>) &#123;</span><br><span class="line">            ndk.abiFilters += <span class="string">"mips"</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">create</span>(<span class="string">"mips-64"</span>) &#123;</span><br><span class="line">            ndk.abiFilters += <span class="string">"mips64"</span></span><br><span class="line">        &#125;</span><br><span class="line">       <span class="comment"> // To include all cpu architectures, leaves abiFilters empty</span></span><br><span class="line">        <span class="built_in">create</span>(<span class="string">"all"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile fileTree(dir: <span class="string">'libs'</span>, <span class="built_in">include</span>: [<span class="string">'*.jar'</span>])</span><br><span class="line">    compile <span class="string">'com.android.support:appcompat-v7:22.2.1'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这部分改动比较大，仔细对比下，最外层是 <code>Model</code>。</p>
<p>看下 <code>defaultConfig.with</code> 这个，名称改动很大，设置 <code>versionCode</code> 和 <code>verisonName</code> 的字段好像没了，我添加进去之后，会有错误：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error:Cause: org<span class="class">.gradle</span><span class="class">.api</span><span class="class">.internal</span><span class="class">.ExtensibleDynamicObject</span></span><br></pre></td></tr></table></figure>
<p>应该是没有这个设置项了，不知道该在哪设置。</p>
<p><code>android.ndk</code> 里面的 <code>moduleName</code> 设置的是生成 SO 包的名称。</p>
<h4 id="编写_Native_代码">编写 Native 代码</h4><p>Gradle 中不配置路径的话，Native 代码就放在 jni 目录下。和 Eclipse 里面差不多，都要用 <code>javah</code> 来生成头文件。</p>
<h5 id="先创建一个类，写个_native_方法">先创建一个类，写个 native 方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NativeAdapter</span>  </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.loadLibrary(<span class="string">"JniLibrary"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NativeAdapter</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> String <span class="title">nativeInit</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="生成头文件">生成头文件</h5><p>编译生成 class 文件之后，就可以用 <code>javah</code> 命令生成头文件。发现因为路径的原因，输入的命令好长。在网上找到个脚本管用。在 <code>app/</code> 目录下新建个 <code>javah.sh</code> 文件。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="shebang">#!/usr/bin/env bash</span></span><br><span class="line"><span class="built_in">export</span> ProjectPath=$(<span class="built_in">cd</span> <span class="string">"../<span class="variable">$(dirname "$1")</span>"</span>; <span class="built_in">pwd</span>)</span><br><span class="line"><span class="built_in">export</span> TargetClassName=<span class="string">"com.light.ndkdemo.NativeAdapter"</span></span><br><span class="line">  </span><br><span class="line"><span class="built_in">export</span> SourceFile=<span class="string">"<span class="variable">$&#123;ProjectPath&#125;</span>/app/src/main/java"</span></span><br><span class="line"><span class="built_in">export</span> TargetPath=<span class="string">"<span class="variable">$&#123;ProjectPath&#125;</span>/app/src/main/jni"</span></span><br><span class="line">  </span><br><span class="line"><span class="built_in">cd</span> <span class="string">"<span class="variable">$&#123;SourceFile&#125;</span>"</span></span><br><span class="line">javah <span class="operator">-d</span> <span class="variable">$&#123;TargetPath&#125;</span> -classpath <span class="string">"<span class="variable">$&#123;SourceFile&#125;</span>"</span> <span class="string">"<span class="variable">$&#123;TargetClassName&#125;</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="operator">-d</span> <span class="variable">$&#123;TargetPath&#125;</span> -classpath <span class="string">"<span class="variable">$&#123;SourceFile&#125;</span>"</span> <span class="string">"<span class="variable">$&#123;TargetClassName&#125;</span>"</span></span><br></pre></td></tr></table></figure>
<p>更改 TargetClassName 路径为带 native 方法的那个类。</p>
<p>然后再执行这个脚本，当然需要装个 bash 插件。（会自动提示你安装）</p>
<p><img src="image.png" alt=""></p>
<p>成功的话，再 jni 目录即可看到 <code>.h</code> 文件。</p>
<h5 id="编写_C_文件">编写 C 文件</h5><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">include <span class="string">"com_light_ndkdemo_NativeAdapter.h"</span>  </span><br><span class="line">  </span><br><span class="line">JNIEXPORT jstring JNICALL Java_com_light_ndkdemo_NativeAdapter_nativeInit</span><br><span class="line">        (JNIEnv * env, jobject obj)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">(*env)</span>-&gt;</span>NewStringUTF(env, <span class="string">"hello worlddddd!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="Make_Project_编译生成_SO">Make Project 编译生成 SO</h5><p>编译之后，在 <code>build/intermediates/binaries</code> 下面能找到这些动态库。</p>
<p><img src="image1.png" alt=""></p>
<p>最后使用的时候调用就行了。应该是能够返回 “hello worlddddd!” 的。不知道什么时候能够完美的使用，NDK 官网教程还是使用 Eclipse 的。</p>
<h4 id="Useful_Links">Useful Links</h4><p><a href="http://tools.android.com/tech-docs/new-build-system/gradle-experimental" target="_blank" rel="external">Experimental Plugin User Guide</a></p>
<p><a href="http://tools.android.com/tech-docs/android-ndk-preview" target="_blank" rel="external">Android NDK Preview</a></p>
<p><a href="https://github.com/googlesamples/android-ndk/tree/master/hello-jni" target="_blank" rel="external">Sample hello-jni</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>首先说明的是，Android Stuido 1.3 对 NDK 的支持是不完善的，感觉比 Eclipse 差很多，但是趋势来看，这样的使用方式将会方便很多。</p>
<h4 id="当前环境">当前环境</h4><ul>
<li>OS X Yosemite</li>
<li>Android Studio 1.3.1</li>
<li>NDK r10e</li>
<li>SDK 22</li>
</ul>
<h4 id="配置_NDK">配置 NDK</h4><p>在 <code>local.properties</code> 配置 NDK</p>
<figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ndk.<span class="built_in">dir</span>=/your-ndk-<span class="built_in">path</span>/android-ndk-r10e</span><br></pre></td></tr></table></figure>
<h4 id="Gradle">Gradle</h4><p>Gradle 使用的是 experimental ，版本要 2.5。</p>
<h5 id="gradle-wrapper_更改">gradle-wrapper 更改</h5><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">distributionUrl=https\<span class="symbol">://services</span>.gradle.org/distributions/gradle-<span class="number">2.5</span>-all.zip</span><br></pre></td></tr></table></figure>
<h5 id="根目录_build-gradle_更改">根目录 build.gradle 更改</h5><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">classpath</span> <span class="string">'com.android.tools.build:gradle-experimental:0.2.0'</span></span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="Android NDK" scheme="/tags/Android-NDK/"/>
    
      <category term="Android Studio" scheme="/tags/Android-Studio/"/>
    
      <category term="Android" scheme="/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android Studio Gradle]]></title>
    <link href="/2015/07/31/Android-Gradle-Tools/"/>
    <id>/2015/07/31/Android-Gradle-Tools/</id>
    <published>2015-07-31T03:35:58.000Z</published>
    <updated>2015-08-12T15:02:52.000Z</updated>
    <content type="html"><![CDATA[<h3 id="概述">概述</h3><p>其实我也没有深入的了解 Gradle，因为 Android Studio 使用的是它，build 的时候需要。所以很多常用的功能需要用到它。</p>
<p>Gradle 是项目自动化构建工具，<a href="http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Introduction" target="_blank" rel="external">Gradle Plugin User Guide</a> 说到它的目标是：</p>
<ul>
<li>让重用代码和资源变得更加容易</li>
<li>让创建同一应用程序的不同版本变得更加容易，无论是多个 APK 发布版本还是同一个应用的不同定制版本</li>
<li>让构建过程变得更加容易配置，扩展和定制</li>
<li>整合优秀的 IDE</li>
</ul>
<p>这里稍微整理了下经常使用的功能。</p>
<h3 id="Manifest_属性">Manifest 属性</h3><ul>
<li>minSdkVersion</li>
<li>targetSdkVersion</li>
<li>versionCode</li>
<li>versionName</li>
<li>applicationId</li>
<li>Package Name for the test application</li>
<li>Instrumentation test runner</li>
</ul>
<a id="more"></a>
<p><img src="image0.png" alt=""></p>
<p>这些配置之前在 eclipse 中是在 Manifest 文件中有配置的，在 Android Stuido 生成的 Manifest 中没有了，都在 build.gradle(app) 中配置。</p>
<h3 id="签名">签名</h3><p>签名需要如下内容：</p>
<ul>
<li>A keystore</li>
<li>A keystore password</li>
<li>A key alias name</li>
<li>A key password</li>
<li>The store type</li>
</ul>
<p><img src="image1.png" alt=""></p>
<p>debug 版本的这里没有进行配置，默认会有一个 debug.keystore。release 配置的时候，我以为直接在这里配置好后，会直接生成一个 keystore。但 build 的时候，是在 <code>app/</code> 根目录下寻找，报了没找到的错误。只好手动生成了个 keystore 放在那。</p>
<p>如果你不愿意将 keyPassword 显示在这，或者不加入版本控制，可以在 <code>gradle.properties</code> 里面配置。</p>
<figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">KEYSTORE_PASSWORD=<span class="number">1111111</span></span><br><span class="line">KEY_PASSWORD=<span class="number">11111111</span></span><br></pre></td></tr></table></figure>
<p>替换 signingConfigs 中的配置即可。</p>
<h3 id="构建类型">构建类型</h3><p>默认情况下，buildTypes 里面会有 release 和 debug 两个版本。内容包括配置签名，混淆，更改其他配置等。</p>
<p><img src="image2.png" alt=""></p>
<p><code>signingConfig signingConfigs.release</code> 配置的是 release 签名，debug 的类似。</p>
<h4 id="混淆">混淆</h4><figure class="highlight ocaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">minifyEnabled <span class="literal">true</span></span><br><span class="line">proguardFiles getDefaultProguardFile(<span class="symbol">'proguard</span>-android.txt'), <span class="symbol">'proguard</span>.cfg'</span><br></pre></td></tr></table></figure>
<p>新版本的只要将 <code>minifyEnabled</code> 设置为 true 就会开启混淆。proguard-android.txt 是在 SDK 路径下的默认文件，proguard.cfg 是自己新加的，和 eclipse 中一样。文件里面的内容可以找个模版。</p>
<h4 id="更改_APK_文件名">更改 APK 文件名</h4><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">applicationVariants<span class="built_in">.</span><span class="literal">all</span> &#123; variant <span class="subst">-&gt;</span><br><span class="line"></span>variant<span class="built_in">.</span>outputs<span class="built_in">.</span>each &#123; output <span class="subst">-&gt;</span><br><span class="line"></span><span class="keyword">if</span> (output<span class="built_in">.</span>outputFile <span class="subst">!=</span> <span class="built_in">null</span> <span class="subst">&amp;&amp;</span> output<span class="built_in">.</span>outputFile<span class="built_in">.</span>name<span class="built_in">.</span>endsWith(<span class="string">'.apk'</span>)</span><br><span class="line">        <span class="subst">&amp;&amp;</span><span class="string">'release'</span><span class="built_in">.</span><span class="keyword">equals</span>(variant<span class="built_in">.</span>buildType<span class="built_in">.</span>name)) &#123;</span><br><span class="line">    def apkFile <span class="subst">=</span> <span class="literal">new</span> File(</span><br><span class="line">            output<span class="built_in">.</span>outputFile<span class="built_in">.</span>getParent(),</span><br><span class="line">            <span class="string">"app_$&#123;variant.flavorName&#125;_v$&#123;variant.versionName&#125;.apk"</span>)</span><br><span class="line">    output<span class="built_in">.</span>outputFile <span class="subst">=</span> apkFile</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure>
<p>输入的文件名 <code>app_${variant.flavorName}_v${variant.versionName}.apk</code>，包括了定制的 flavor 里面的名称和版本号。</p>
<h4 id="BuildConfig">BuildConfig</h4><p>BuildConfig.java 是 Android Gradle 自动生成的一个文件，你可以通过 gradle 动态配置它的变量的值。可以设置 Log 在 debug 的时候显示，release 不显示。或者更改 release 和 debug 访问接口的网址。</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">defaultConfig</span> &#123;</span><br><span class="line"><span class="title">buildConfigField</span> <span class="string">'String'</span>,<span class="string">'API_SERVER_URL'</span>,<span class="string">'"http://llzz.me/"'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 release 和 debug 设置不同的 URL。在 BuildConfig.java 中就会生成这个变量。在使用 URL 的地方使用 BuildConfig.java 类就行。</p>
<h3 id="多渠道打包">多渠道打包</h3><p>多渠道打包没有 ANT 中配置那么多，直接使用 <code>productFlavors</code> 属性就可以替换 UMENG_CHANNEL。</p>
<p><img src="image3.png" alt=""></p>
<p><code>productFlavors.all</code> 里面会循环替换 UMENG_CHANNEL。</p>
<h3 id="生成_APK">生成 APK</h3><p>生成 APK 可以使用 gradle 的命令执行。我是直接在 Android Studio 的 Gradle Project 面板生成的。</p>
<p><img src="image4.png" alt=""></p>
<p>双击就可以生成，看目录就知道是可以单个生成的。APK 输出是在 <code>app/build/outputs</code> 目录。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="概述">概述</h3><p>其实我也没有深入的了解 Gradle，因为 Android Studio 使用的是它，build 的时候需要。所以很多常用的功能需要用到它。</p>
<p>Gradle 是项目自动化构建工具，<a href="http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Introduction">Gradle Plugin User Guide</a> 说到它的目标是：</p>
<ul>
<li>让重用代码和资源变得更加容易</li>
<li>让创建同一应用程序的不同版本变得更加容易，无论是多个 APK 发布版本还是同一个应用的不同定制版本</li>
<li>让构建过程变得更加容易配置，扩展和定制</li>
<li>整合优秀的 IDE</li>
</ul>
<p>这里稍微整理了下经常使用的功能。</p>
<h3 id="Manifest_属性">Manifest 属性</h3><ul>
<li>minSdkVersion</li>
<li>targetSdkVersion</li>
<li>versionCode</li>
<li>versionName</li>
<li>applicationId</li>
<li>Package Name for the test application</li>
<li>Instrumentation test runner</li>
</ul>]]>
    
    </summary>
    
      <category term="Android Studio Gradle" scheme="/tags/Android-Studio-Gradle/"/>
    
      <category term="Android Studio 打包" scheme="/tags/Android-Studio-%E6%89%93%E5%8C%85/"/>
    
      <category term="Gradle" scheme="/tags/Gradle/"/>
    
      <category term="Android" scheme="/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android Studio Plugins]]></title>
    <link href="/2015/07/17/Android-Studio-Plugins/"/>
    <id>/2015/07/17/Android-Studio-Plugins/</id>
    <published>2015-07-17T06:29:52.000Z</published>
    <updated>2015-08-12T15:03:55.000Z</updated>
    <content type="html"><![CDATA[<p>Android Studio 的插件还是很丰富的，但我知道的就那几个，在此介绍几个我比较喜欢的。</p>
<h3 id="Android_Drawable_Importer">Android Drawable Importer</h3><p><a href="https://github.com/winterDroid/android-drawable-importer-intellij-plugin" target="_blank" rel="external">Android Drawable Importer</a> 插件能够为你导入常用的图标，主要有 4 种功能：</p>
<ul>
<li>导入 <a href="https://github.com/opoloo/androidicons" target="_blank" rel="external">Android Icons</a></li>
<li>导入 <a href="https://github.com/google/material-design-icons/releases" target="_blank" rel="external">Material Icons</a></li>
<li>缩放 Drawable</li>
<li>同时导入不同规格的 Drawable</li>
</ul>
<p>在 Plugins 里下载完之后，需要进行图标路径配置（请先下载 icons）：</p>
<a id="more"></a>
<p><img src="image1.png" alt=""></p>
<p>Android Icons 路径配置到 <code>assets</code> 目录。<br>Material Icons 路径配置到根目录即可。</p>
<p>配置完，在需要导入图标的目录右键 &gt; New 就可以看到以下选项：</p>
<p><img src="image2.png" alt=""></p>
<p>选择 MaterialIcon Import。</p>
<p><img src="image3.png" alt=""></p>
<p>个人开发的时候，再也不用担心找不到合适的图标了。关于缩放图片 &amp; 多源导入可以到 Android Drawable Importer 主页查看。</p>
<h3 id="Android_Code_Generation">Android Code Generation</h3><p><a href="http://tmorcinek.github.io/android-codegenerator-plugin-intellij/" target="_blank" rel="external">Android Code Generation</a> 是一个代码生成的插件，主要能够用它完成 FindViewById 这个过程。它能通过 Layout 中的 <code>android：id</code> 在 Java 代码中一键生成控件绑定的代码。</p>
<p>这个和注入方式差不多，但是我个人不喜欢注入，好像少了一个过程一样。注入方式可以使用这个比较多人用的插件 <a href="https://github.com/avast/android-butterknife-zelezny" target="_blank" rel="external"><code>android-butterknife-zelezny</code></a>。</p>
<p>下载完 Android Code Generation 之后，右键 Layout (xx.xml) &gt; Generate Android Code ，有 3 种方式可以选择：</p>
<ul>
<li>Activity</li>
<li>Fragment</li>
<li>Adapter</li>
</ul>
<p>选择 Activity，它会帮你生成一个文件，生成之前可以修改。</p>
<p><img src="image4.png" alt=""></p>
<p>这个 <code>tvTest</code> 就是自动生成的。其实这个是我更改之后的模版，我添加了一个 <code>initView()</code> 方法，把控件绑定放在了方法里面。模版可以在插件设置里面更改。</p>
<h3 id="GsonFormat">GsonFormat</h3><p><a href="https://github.com/zzz40500/GsonFormat" target="_blank" rel="external">GsonFormat</a> 是一个将 JsonObject 转化成实体类的插件。很方便，能够支持复杂的 Json 数据。</p>
<p><img src="image5.gif" alt=""></p>
<p>图片能够很直观的看到效果，就不再讲述了。具体可以查看它的主页，是中文的。</p>
<p>还有很多例如 <a href="https://github.com/pbreault/adb-idea" target="_blank" rel="external">adb idea</a>，<a href="https://github.com/mcxiaoke/gradle-packer-plugin" target="_blank" rel="external">gradle-packer-plugin</a> 还有一些提供测试的插件，我没有真正使用，以后用到不错的话，再补充。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Android Studio 的插件还是很丰富的，但我知道的就那几个，在此介绍几个我比较喜欢的。</p>
<h3 id="Android_Drawable_Importer">Android Drawable Importer</h3><p><a href="https://github.com/winterDroid/android-drawable-importer-intellij-plugin">Android Drawable Importer</a> 插件能够为你导入常用的图标，主要有 4 种功能：</p>
<ul>
<li>导入 <a href="https://github.com/opoloo/androidicons">Android Icons</a></li>
<li>导入 <a href="https://github.com/google/material-design-icons/releases">Material Icons</a></li>
<li>缩放 Drawable</li>
<li>同时导入不同规格的 Drawable</li>
</ul>
<p>在 Plugins 里下载完之后，需要进行图标路径配置（请先下载 icons）：</p>]]>
    
    </summary>
    
      <category term="Android Studio 使用" scheme="/tags/Android-Studio-%E4%BD%BF%E7%94%A8/"/>
    
      <category term="Android Studio 插件" scheme="/tags/Android-Studio-%E6%8F%92%E4%BB%B6/"/>
    
      <category term="Android" scheme="/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[My List]]></title>
    <link href="/2015/07/15/My-List/"/>
    <id>/2015/07/15/My-List/</id>
    <published>2015-07-15T14:27:53.000Z</published>
    <updated>2015-08-12T15:04:48.000Z</updated>
    <content type="html"><![CDATA[<p>有时候忙起来很容易忘记一些事情，于是会用一些 Todo List 类型的备忘录。只是我也不太喜欢被它提醒，因为很多事情并不是急于去做。比如当我看到一本好书，想下次买书的时候一起买，可是谁知道自己下次买书具体时间。于是，我希望它简单一点，像一个便笺，让我有空的时候翻一翻就行。</p>
<p>于是，按照自己的需求，业余时间做了一版 Android 应用。单纯的命名为 My List，中文名暂且叫做<strong>纪录</strong>。</p>
<p>按照我的想法，我希望进入应用就能知道记录了一些什么事情，所以很自然的用列表去呈现它。然后就想到，记录的事情的顺序该怎么排列好，突然想到用优先级，最后选中用颜色深浅来标记优先级。深色的排在前面。</p>
<p>最终交互仅仅是这样的：</p>
<ul>
<li>首页下拉添加新的记录</li>
<li>选择颜色标记优先级（位置）</li>
</ul>
<p>感觉初版这样也就够了，毕竟核心功能也有了。之后还添加了个版本更新与友盟统计。</p>
<h3 id="截图">截图</h3><a id="more"></a>
<p><img src="screenshop.png" alt=""></p>
<p>风格还是采用的 Material Design。这个截图是 Android 5.0 系统的，当然也兼容 4.x。</p>
<p><img src="screenshop1.png" alt=""></p>
<p>这是个发布添加界面。刚开始是只能看到那个白色的按钮。点击之后出现颜色选择。</p>
<h3 id="技术点">技术点</h3><p>简单来说，这个应用开发很简单。使用的一些元素：</p>
<ul>
<li><strong>Toolbar</strong></li>
<li><strong>RecyclerView</strong></li>
<li><strong>CardView</strong></li>
<li><strong>SwipeRefreshLayout</strong></li>
<li><strong>Floating Action Button</strong></li>
<li><strong>Ormlite</strong></li>
</ul>
<p>大概这几个。<code>RecyclerView</code> 和 <code>CardView</code> 的是使用可以参考这个 <a href="http://llzz.me/2015/06/03/Use-Material-Design/" target="_blank" rel="external">Use Material Design</a>。 <code>SwipeRefreshLayout</code> 是 v4 包里面的，下拉出一个刷新图标，只是我把这个图标改了下。<a href="https://github.com/futuresimple/android-floating-action-button" target="_blank" rel="external">Floating Action Button</a> 是一个第三方库，其实也是 Android 5.0＋ 才有的。<code>Ormlite</code> 是数据库 orm 工具，可参考这个 <a href="http://llzz.me/2015/04/28/android-ormlite/" target="_blank" rel="external">Android Ormlite</a>。</p>
<h3 id="源码">源码</h3><p>源码在 GitHub，随手就创建了个 GitHub Pages。<a href="http://lightlz.github.io/MyList/" target="_blank" rel="external">Download</a></p>
<p>APK 下载可以扫下面。</p>
<p><img src="download.png" alt=""></p>
<p>之后估计还会继续更新，如果你有任何关于 My List 的问题可以 EMAIL Me。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>有时候忙起来很容易忘记一些事情，于是会用一些 Todo List 类型的备忘录。只是我也不太喜欢被它提醒，因为很多事情并不是急于去做。比如当我看到一本好书，想下次买书的时候一起买，可是谁知道自己下次买书具体时间。于是，我希望它简单一点，像一个便笺，让我有空的时候翻一翻就行。</p>
<p>于是，按照自己的需求，业余时间做了一版 Android 应用。单纯的命名为 My List，中文名暂且叫做<strong>纪录</strong>。</p>
<p>按照我的想法，我希望进入应用就能知道记录了一些什么事情，所以很自然的用列表去呈现它。然后就想到，记录的事情的顺序该怎么排列好，突然想到用优先级，最后选中用颜色深浅来标记优先级。深色的排在前面。</p>
<p>最终交互仅仅是这样的：</p>
<ul>
<li>首页下拉添加新的记录</li>
<li>选择颜色标记优先级（位置）</li>
</ul>
<p>感觉初版这样也就够了，毕竟核心功能也有了。之后还添加了个版本更新与友盟统计。</p>
<h3 id="截图">截图</h3>]]>
    
    </summary>
    
      <category term="Android" scheme="/tags/Android/"/>
    
      <category term="Todo List" scheme="/tags/Todo-List/"/>
    
      <category term="Android" scheme="/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Build Android 5.0 Source]]></title>
    <link href="/2015/06/17/Build-Android-5-0-Source/"/>
    <id>/2015/06/17/Build-Android-5-0-Source/</id>
    <published>2015-06-17T10:51:23.000Z</published>
    <updated>2015-06-18T07:55:46.000Z</updated>
    <content type="html"><![CDATA[<p>突然觉的学习 Android 应该去了解下它的源码，虽然内容量很大很大，但是慢慢的去看一下想了解的模块，还是可以的。这将会是一个漫长的过程。</p>
<h2 id="环境">环境</h2><ul>
<li>OS X Yosemite</li>
<li>Xcode 6.3.2</li>
<li>Android 5.0.1</li>
</ul>
<p>按照官网的 <a href="https://source.android.com/source/initializing.html#setting-up-a-mac-os-x-build-environment" target="_blank" rel="external">Initializing a Build Environment</a> 来配置环境，这里应该是没有什么问题的。很无奈的是下载源码挂 VPN 断断续续的竟然下了近一周！这时间真是太长了。</p>
<h2 id="问题">问题</h2><h3 id="repo:_command_not_found">repo: command not found</h3><p>这个问题出现在你执行 repo sync 的时候。解决方法是在执行之前输入：</p>
<figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">PATH</span>=~/bin:$<span class="built_in">PATH</span></span><br></pre></td></tr></table></figure>
<p>再执行 repo sync 就可以继续下载了。</p>
<h3 id="Unable_to_find_any_JVMs_matching_version_“1-7”-">Unable to find any JVMs matching version “1.7”.</h3><p>这个问题是出现在 lunch 的时候。错误告诉你没有 1.7 的 jvm。其实我这里已经有个 8 的 jdk，所以配置环境的时候直接是跳过了配置 Java 这一步。</p>
<p>再回去看发现 5.0 以上的是要求使用 Java 7 的。Mac 的话使用 <a href="https://www.oracle.com/technetwork/java/javase/downloads/java-archive-downloads-javase7-521261.html#jdk-7u71-oth-JPR" target="_blank" rel="external">jdk-7u71-macosx-x64.dmg</a>。下载一个 JDK 7 就可以了。</p>
<h3 id="case-sensitive_filesystem">case-sensitive filesystem</h3><p>在 lunch 的时候还出现了这个错误：</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">You are building <span class="command"><span class="keyword">on</span> <span class="title">a</span> <span class="title">case-insensitive</span> <span class="title">filesystem</span>.</span></span><br><span class="line">Please move your source tree <span class="built_in">to</span> <span class="operator">a</span> <span class="keyword">case</span>-sensitive filesystem</span><br></pre></td></tr></table></figure>
<p>在 Mac 的话，需要创建一个大小写敏感的分区，操作相当于 U 盘。这个之前我已经创建了，出现这个错误是因为运行的位置不对。<strong>应该把下载的源码放到这个分区里面运行才是对的</strong>。</p>
<figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># hdiutil <span class="keyword">create</span> -<span class="keyword">type</span> SPARSE -fs <span class="string">'Case-sensitive Journaled HFS+'</span> -size <span class="number">40</span>g ~/android.dmg</span><br></pre></td></tr></table></figure>
<p>官网提供创建的分区大小是 40g，到后面发现在 make 生成 system.img 的时候大小是不够的。我设置成了 100g。</p>
<p>官网配置 <code>function mountAndroid</code> 这个是方便启动这个分区。配置完之后直接在终端输入 mountAndroid 就可以将这个分区启动。</p>
<p>之后才发现下载源码的时候直接下载在这个分区就行了。</p>
<h3 id="fatal_error:_‘string’_file_not_found">fatal error: ‘string’ file not found</h3><p>开始使用的时候，使用的 Xcode 6.1.1，报的错是：</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fatal <span class="keyword">error</span>: 'cstring' <span class="type">file</span> <span class="keyword">not</span> found</span><br></pre></td></tr></table></figure>
<p>然后新装了 6.3.2 就报了错如标题，应该是差不多的问题。</p>
<p>解决方法：</p>
<ul>
<li><p>下载 XCode5.1.1（apple 官网）</p>
</li>
<li><p>创建 /Developer/SDK 目录</p>
  <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -<span class="tag">p</span> /Developer/SDK</span><br></pre></td></tr></table></figure>
</li>
<li><p>复制 MacOSX10.8.sdk 到 /Developer/SDK</p>
<p><img src="image1.png" alt=""></p>
<p>路径 Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/。</p>
</li>
<li><p>复制 Xcode.app 到 /Developer</p>
<p>在打开的 Xcode5.1.1.dmg 分区搜索，复制完之后这个 5.1.1 的就可以不要了。</p>
</li>
<li><p>打开 Xcode 6，Preferences 中修改 Command Line Tools</p>
<p><img src="image3.png" alt=""></p>
</li>
</ul>
<p>这个解决方案出自这里 <a href="https://medium.com/@raminmahmoodi/build-android-5-0-lollipop-on-osx-10-10-yosemite-441bd00ee77a" target="_blank" rel="external">Build Android 5.0 Lollipop on OSX 10.10 Yosemite</a> 。</p>
<h3 id="linux/netfilter/xt_DSCP-h:_No_such_file_or_directory">linux/netfilter/xt_DSCP.h: No such file or directory</h3><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> external/iptables/extensions/../<span class="keyword">include</span>/linux/netfilter</span><br><span class="line">ln -s xt_dscp.<span class="keyword">h</span> xt_DSCP.<span class="literal">h</span></span><br></pre></td></tr></table></figure>
<p>这样运行之后就可以解决。</p>
<p>大概就出现这几个错误，<code>make -j4</code> 这个命令之后经历了一个多小时的编译终于完成。</p>
<p><img src="image2.png" alt=""></p>
<h3 id="Android_Studio_查看源码">Android Studio 查看源码</h3><ul>
<li><p>产生 ide 的环境，进入根目录执行：</p>
  <figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mmm development<span class="regexp">/tools/idegen/</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>成功之后执行：</p>
 <figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh .<span class="regexp">/development/</span>tools<span class="regexp">/idegen/i</span>degen.sh</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>最后用 Android studio 打开根目录（选择现有的项目）</li>
</ul>
<p><img src="image4.png" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>突然觉的学习 Android 应该去了解下它的源码，虽然内容量很大很大，但是慢慢的去看一下想了解的模块，还是可以的。这将会是一个漫长的过程。</p>
<h2 id="环境">环境</h2><ul>
<li>OS X Yosemite</li>
<li>Xcode 6.3.2]]>
    </summary>
    
      <category term="Android 源码" scheme="/tags/Android-%E6%BA%90%E7%A0%81/"/>
    
      <category term="Lollipop Source" scheme="/tags/Lollipop-Source/"/>
    
      <category term="Android" scheme="/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Use Material Design]]></title>
    <link href="/2015/06/03/Use-Material-Design/"/>
    <id>/2015/06/03/Use-Material-Design/</id>
    <published>2015-06-03T13:17:22.000Z</published>
    <updated>2016-04-08T08:15:14.000Z</updated>
    <content type="html"><![CDATA[<p>Material Design 是我很喜欢的设计风格，简约至上。去年 Google IO 推出之后，就已经了解了。但是一直没有怎么看 Android L 的 API。趁 Android M 推出这段时间，就试着去使用了下 Android 5.0。</p>
<p><a href="http://design.1sters.com" target="_blank" rel="external">Material Design 中文版</a> 刚出来的时候，参与翻译了其中一章，算是国内最早的中文版吧。</p>
<p>看了 Android Training 里面的 Create App With Material Design，就写了一个简单的 Demo，不完整，但也涉及到了大部分常用的内容。</p>
<h3 id="Overview">Overview</h3><ul>
<li><strong>Material Theme</strong></li>
<li><strong>Activity Transition</strong></li>
<li><strong>RecyclerView &amp; CardView</strong></li>
<li><strong>Palette</strong></li>
<li><strong>Ripple</strong></li>
</ul>
<h3 id="Screenshot">Screenshot</h3><p><img src="http://7xluln.com1.z0.glb.clouddn.com/material1.png" alt=""></p>
<p><img src="http://7xluln.com1.z0.glb.clouddn.com/material3.png" alt=""></p>
<p><img src="http://7xluln.com1.z0.glb.clouddn.com/material2.png" alt=""></p>
<h3 id="Material_Theme">Material Theme</h3><p>Material 的主题其实和 Holo 的类型差不多，有这样的：</p>
<p><code>android:Theme.Material.Light</code><br><code>android:Theme.Material.Light.DarkActionBar</code><br><code>android:Theme.Material</code></p>
<p>除了这个，还可以在 Theme 里面重写一些属性来定义状态栏、标题栏和一些控件的颜色。</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;resources&gt;</span><br><span class="line">  &lt;!<span class="comment">-- inherit from the material theme --&gt;</span></span><br><span class="line">  &lt;style <span class="property">name</span>=<span class="string">"AppTheme"</span> parent=<span class="string">"android:Theme.Material"</span>&gt;</span><br><span class="line">    &lt;!<span class="comment">-- Main theme colors --&gt;</span></span><br><span class="line">    &lt;!<span class="comment">--   your app branding color for the app bar --&gt;</span></span><br><span class="line">    &lt;<span class="property">item</span> <span class="property">name</span>=<span class="string">"android:colorPrimary"</span>&gt;@color/primary&lt;/<span class="property">item</span>&gt;</span><br><span class="line">    &lt;!<span class="comment">--   darker variant for the status bar and contextual app bars --&gt;</span></span><br><span class="line">    &lt;<span class="property">item</span> <span class="property">name</span>=<span class="string">"android:colorPrimaryDark"</span>&gt;@color/primary_dark&lt;/<span class="property">item</span>&gt;</span><br><span class="line">    &lt;!<span class="comment">--   theme UI controls like checkboxes and text fields --&gt;</span></span><br><span class="line">    &lt;<span class="property">item</span> <span class="property">name</span>=<span class="string">"android:colorAccent"</span>&gt;@color/accent&lt;/<span class="property">item</span>&gt;</span><br><span class="line">  &lt;/style&gt;</span><br><span class="line">&lt;/resources&gt;</span><br></pre></td></tr></table></figure>
<h3 id="Activity_Transition">Activity Transition</h3><p>这里的 Translation 是 Shared Element。在主页（图1）的 GridView 点击 item 之后，图片和文字将会有放大的效果，直接连接下一个 Activity 里面的图片和文字。在详情页面（图2）点击返回之后，图片和文字又回缩回主页中。</p>
<p>实现这个效果需要 Android 5.0 以上的版本。</p>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = <span class="keyword">new</span> Intent(MainActivity.<span class="keyword">this</span>,DetialActivity.<span class="keyword">class</span>);</span><br><span class="line">intent.putExtra(DetialActivity.COLOR_INDEX,position);</span><br><span class="line"></span><br><span class="line">ActivityOptionsCompat activityOptions = ActivityOptionsCompat.makeSceneTransitionAnimation(MainActivity.<span class="keyword">this</span>,</span><br><span class="line">                        </span><br><span class="line"><span class="keyword">new</span> Pair&lt;View, <span class="built_in">String</span>&gt;(view.findViewById(R.id.imageview_item),DetialActivity.DETIAL_IMAGE),</span><br><span class="line"><span class="keyword">new</span> Pair&lt;View, <span class="built_in">String</span>&gt;(view.findViewById(R.id.textview_name),DetialActivity.DETIAL_NAME));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Now we can start the Activity, providing the activity options as a bundle</span></span><br><span class="line">ActivityCompat.startActivity(MainActivity.<span class="keyword">this</span>, intent, activityOptions.toBundle());</span><br></pre></td></tr></table></figure>
<p>主要用的是<code>makeSceneTransitionAnimation</code>这个方法，在 Pair 这个参数中是可以关联很多个数据的，这里之后图片和文字。</p>
<p>很重要的，要为每一个关联的 View 设定一个<code>TransitionName</code>，这里是<code>DETIAL_IMAGE</code>和<code>DETIAL_NAME</code>。</p>
<p>同样，在另外一个 Activity 里面需要为关联的 View 设置这个 Transition Name。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">ViewCompat</span><span class="class">.setTransitionName</span>(<span class="tag">mHeaderImageView</span>, <span class="tag">DETIAL_IMAGE</span>);</span><br><span class="line"><span class="tag">ViewCompat</span><span class="class">.setTransitionName</span>(<span class="tag">mHeaderTitle</span>, <span class="tag">DETIAL_NAME</span>);</span><br></pre></td></tr></table></figure>
<p>然后再让 View 显示就可以了。其实这里可以自定义各种<code>activityOptions</code>，来定义 Activity Transition 动画。</p>
<h3 id="RecyclerView_&amp;_CardView">RecyclerView &amp; CardView</h3><p>RecyclerView 就不再做介绍了，这里是和 CardView 一起使用的。在详情页（图2）下方的显示的就是。先来看 CardView。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;android<span class="class">.support</span><span class="class">.v7</span><span class="class">.widget</span><span class="class">.CardView</span></span><br><span class="line">   xmlns:card_view=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span><br><span class="line">   android:layout_width=<span class="string">"match_parent"</span></span><br><span class="line">   android:layout_height=<span class="string">"match_parent"</span></span><br><span class="line">   android:layout_margin=<span class="string">"4dp"</span></span><br><span class="line">   card_view:cardCornerRadius=<span class="string">"4dp"</span>&gt;</span><br><span class="line">&lt;/android<span class="class">.support</span><span class="class">.v7</span><span class="class">.widget</span><span class="class">.CardView</span>&gt;</span><br></pre></td></tr></table></figure>
<p>CardView 还有很多属性，比如阴影。这里只用了<code>cardCornerRadius</code>来设置圆角。然后把需要显示的布局嵌套在 CardView 里面就行。</p>
<p>RecyclerView 相对 ListView 来说，比较大的一个变化就是多了一个<code>LayoutManager</code>。</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">layoutManager = <span class="keyword">new</span> FullyLinearLayoutManager(<span class="keyword">this</span>);</span><br><span class="line">recyclerView.setLayoutManager(layoutManager);</span><br></pre></td></tr></table></figure>
<p>这里的<code>FullyLinearLayoutManager</code>是继承的 LinearLayoutManager，因为 RecyclerView 和 ScrollView 有冲突。</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public static <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> &#123;</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="type">TextView</span> tvColorName;</span><br><span class="line">   <span class="keyword">private</span> <span class="type">ImageView</span> imgColor;</span><br><span class="line"></span><br><span class="line">   public <span class="type">ViewHolder</span>(<span class="type">View</span> itemView) &#123;</span><br><span class="line">       <span class="keyword">super</span>(itemView);</span><br><span class="line"></span><br><span class="line">       tvColorName = (<span class="type">TextView</span>)itemView.findViewById(<span class="type">R</span>.id.item_tv);</span><br><span class="line">       imgColor = (<span class="type">ImageView</span>)itemView.findViewById(<span class="type">R</span>.id.item_img);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个是 RecyclerView 的 ViewHolder，和 ListView 里面差不多。</p>
<p>继承<code>RecyclerView.Adapter</code>需要重写3个方法。</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="function">ViewHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> ViewHolder(layoutInflater.from(context).inflate(R.layout.recycler_item,parent,<span class="keyword">false</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(ViewHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">final</span> <span class="keyword">int</span> index = position;</span><br><span class="line"></span><br><span class="line">   holder.tvColorName.setText(dataSet.get(position).getColorName());</span><br><span class="line">   holder.imgColor.setBackgroundColor(dataSet.get(position).getColorRes());</span><br><span class="line"></span><br><span class="line">   holder.tvColorName.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">       <span class="annotation">@Override</span></span><br><span class="line">       <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">           Message msg = <span class="keyword">new</span> Message();</span><br><span class="line">           msg.arg1 = dataSet.get(index).getColorRes();</span><br><span class="line">           msg.what = DetialActivity.CHANGE_COLOR;</span><br><span class="line">           <span class="keyword">handler</span>.sendMessage(msg);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">return</span> dataSet.<span class="title">size</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在<code>onCreateViewHolder</code>传入之前写的 ViewHolder，在<code>onBindViewHolder</code>中绑定数据。</p>
<h3 id="Palette">Palette</h3><p>这个 Palette 是我相当喜欢的，能够获取到图像中的颜色数据。Android 5.0中还有一个<code>Clip Views</code>用来填充图片也不错。</p>
<p>在 RecyelerView 当中的数据就是用 Palette 获取的。</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Palette</span>.generateAsync(bitmap,new <span class="keyword">Palette</span>.PaletteAsyncListener()&#123;</span><br><span class="line"></span><br><span class="line"> @Override</span><br><span class="line"> public void onGenerated(<span class="keyword">Palette</span> <span class="keyword">palette</span>) &#123;</span><br><span class="line"></span><br><span class="line">     <span class="comment">//充满活力</span></span><br><span class="line">     <span class="keyword">Palette</span>.Swatch vibrantSwatch = <span class="keyword">palette</span>.getVibrantSwatch();</span><br><span class="line">     <span class="keyword">Palette</span>.Swatch lightVibrantSwatch = <span class="keyword">palette</span>.getLightVibrantSwatch();</span><br><span class="line">     <span class="keyword">Palette</span>.Swatch paletteDarkVibrantSwatch = <span class="keyword">palette</span>.getDarkVibrantSwatch();</span><br><span class="line"></span><br><span class="line">     <span class="comment">//柔和</span></span><br><span class="line">     <span class="keyword">Palette</span>.Swatch mutedSwatch = <span class="keyword">palette</span>.getMutedSwatch();</span><br><span class="line">     <span class="keyword">Palette</span>.Swatch darkMutedSwatch = <span class="keyword">palette</span>.getDarkMutedSwatch();</span><br><span class="line">     <span class="keyword">Palette</span>.Swatch lightMutedSwatch = <span class="keyword">palette</span>.getLightMutedSwatch();</span><br><span class="line">｝</span><br></pre></td></tr></table></figure>
<p>一共获取了这几种颜色。是的，获取到的这些颜色是拿来更改状态栏或者标题栏的颜色。当然也可以是别的控件，主要目的是让整个 APP UI 更加统一。</p>
<figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Window <span class="keyword">window</span> = getWindow();</span><br><span class="line"><span class="keyword">window</span>.setStatusBarColor(<span class="keyword">color</span>);</span><br><span class="line"><span class="keyword">window</span>.setNavigationBarColor(<span class="keyword">color</span>);</span><br></pre></td></tr></table></figure>
<h3 id="Ripple">Ripple</h3><p>这个 Ripple 涟漪效果也是很不错的，有分为无界和有界的。这里也只是简单使用了下，在 RecyelerView 的 item 中，使用</p>
<figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">android:</span>background=<span class="string">"?android:attr/selectableItemBackground"</span></span><br></pre></td></tr></table></figure>
<p>更多使用方法可以在官网中查看。</p>
<p>当然，Android 5.0 不仅仅这些，这里是很小一部分，还有很重要动画，阴影等。Material Design 给我最大的印象就是它的动画效果很不错。</p>
<p><a href="https://github.com/lightlz/Use-Material-Design" target="_blank" rel="external">源码在这里</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Material Design 是我很喜欢的设计风格，简约至上。去年 Google IO 推出之后，就已经了解了。但是一直没有怎么看 Android L 的 API。趁 Android M 推出这段时间，就试着去使用了下 Android 5.0。</p>
<p><a hre]]>
    </summary>
    
      <category term="Android" scheme="/tags/Android/"/>
    
      <category term="Material Design" scheme="/tags/Material-Design/"/>
    
      <category term="Android" scheme="/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hexo 搭建博客]]></title>
    <link href="/2015/05/31/Hexo-%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>/2015/05/31/Hexo-搭建博客/</id>
    <published>2015-05-31T02:42:31.000Z</published>
    <updated>2015-06-01T01:50:48.000Z</updated>
    <content type="html"><![CDATA[<p>总感觉 Wrodpress 太厚重了，刚好朋友推荐<code>Hexo</code>不错，于是就把博客迁徙了过来，折腾了一些时间，也遇到了一些问题。</p>
<h3 id="Hexo_安装">Hexo 安装</h3><p>Hexo 安装前需要电脑里面有安装 Git 和 Node.js。详细的安装方法可以查看 <a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="external">官方文档</a>。</p>
<p>在安装的时候，我是直接从 Node.js 官网里面下载的包，这样装之后再执行：</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -<span class="keyword">g</span> hexo-<span class="keyword">cli</span></span><br></pre></td></tr></table></figure>
<p>发现无法安装，报了错：</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">ERR</span>! Darwin 14.0.0</span><br><span class="line">npm <span class="keyword">ERR</span>! argv <span class="string">"node"</span> <span class="string">"/usr/local/bin/npm"</span> <span class="string">"install"</span> <span class="string">"-g"</span> <span class="string">"hexo"</span></span><br><span class="line">npm <span class="keyword">ERR</span>! node v0.10.33</span><br><span class="line">npm <span class="keyword">ERR</span>! npm v2.1.7</span><br><span class="line">npm <span class="keyword">ERR</span>! path /usr/<span class="keyword">local</span>/lib/node_modules/hexo/.gitmodules</span><br><span class="line">npm <span class="keyword">ERR</span>! code EACCES</span><br><span class="line">npm <span class="keyword">ERR</span>! errno 3</span><br><span class="line"></span><br><span class="line">npm <span class="keyword">ERR</span>! <span class="keyword">Error</span>: EACCES, unlink '/usr/<span class="keyword">local</span>/lib/node_modules/hexo/.gitmodules'</span><br><span class="line">npm <span class="keyword">ERR</span>! &#123; [<span class="keyword">Error</span>: EACCES, unlink '/usr/<span class="keyword">local</span>/lib/node_modules/hexo/.gitmodules']</span><br><span class="line">npm <span class="keyword">ERR</span>! errno: 3,</span><br><span class="line">npm <span class="keyword">ERR</span>! code: 'EACCES',</span><br><span class="line">npm <span class="keyword">ERR</span>! path: '/usr/<span class="keyword">local</span>/lib/node_modules/hexo/.gitmodules' &#125;</span><br><span class="line">npm <span class="keyword">ERR</span>! </span><br><span class="line">npm <span class="keyword">ERR</span>! Please try running this command again <span class="keyword">as</span> root/Administrator.</span><br><span class="line">npm <span class="keyword">ERR</span>! <span class="keyword">error</span> <span class="keyword">rolling</span> back <span class="keyword">Error</span>: EACCES, unlink '/usr/<span class="keyword">local</span>/lib/node_modules/hexo/.gitmodules'</span><br><span class="line">npm <span class="keyword">ERR</span>! <span class="keyword">error</span> <span class="keyword">rolling</span> back &#123; [<span class="keyword">Error</span>: EACCES, unlink '/usr/<span class="keyword">local</span>/lib/node_modules/hexo/.gitmodules']</span><br><span class="line">npm <span class="keyword">ERR</span>! <span class="keyword">error</span> <span class="keyword">rolling</span> back errno: 3,</span><br><span class="line">npm <span class="keyword">ERR</span>! <span class="keyword">error</span> <span class="keyword">rolling</span> back code: 'EACCES',</span><br><span class="line">npm <span class="keyword">ERR</span>! <span class="keyword">error</span> <span class="keyword">rolling</span> back path: '/usr/<span class="keyword">local</span>/lib/node_modules/hexo/.gitmodules' &#125;</span><br><span class="line"></span><br><span class="line">npm <span class="keyword">ERR</span>! Please <span class="keyword">include</span> the following <span class="keyword">file</span> with any support request:</span><br><span class="line">npm <span class="keyword">ERR</span>! /Users/xiangwenwen/npm-debug.<span class="literal">log</span></span><br></pre></td></tr></table></figure>
<p>看到好似是没有权限什么的，于是就加了个<code>sudo</code>，但是发现还是报错：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fsevents@0.2.0 <span class="operator"><span class="keyword">install</span> /usr/<span class="keyword">local</span>/lib/node_modules/hexo/node_modules/chokidar/node_modules/fsevents</span><br><span class="line">node-gyp rebuild</span><br><span class="line"></span><br><span class="line">gyp WARN EACCES <span class="keyword">user</span> <span class="string">"root"</span> does <span class="keyword">not</span> have permission <span class="keyword">to</span> access the dev dir &gt;<span class="string">"/Users/xiangwenwen/.node-gyp/0.10.33"</span></span><br><span class="line"></span><br><span class="line">gyp WARN EACCES attempting <span class="keyword">to</span> reinstall <span class="keyword">using</span> <span class="keyword">temporary</span> dev dir &gt;<span class="string">"/usr/local/lib/node_modules/hexo/node_modules/chokidar/node_modules/fsevents/.node-gyp"</span></span></span><br></pre></td></tr></table></figure>
<p>最后在 <a href="https://github.com/hexojs/hexo/issues/913" target="_blank" rel="external">Hexo issue</a> 看到了同样的问题，然后我在 xcode 里面装了<code>command Line Tools</code>在安装就可以了。建议使用文档上的方法安装 Node.js，我服务器的 Ubuntu 环境按照文档安装什么问题都没有。</p>
<h3 id="Hexo_走起">Hexo 走起</h3><h4 id="迁徙">迁徙</h4><p>安装好了 Hexo，可以按照官网的方法发布文章，这个很简单。发布完之后执行<code>hexo server</code>就可以在本地查看了。</p>
<p>官网也提供了很多类型的迁移方案，我把 wordpress 里面的内容拿下来之后，执行：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo migrate wordpress <span class="tag">&lt;<span class="title">source</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>就很快把内容迁移过来了。</p>
<h4 id="主题">主题</h4><p>使用主题也很容易，在官网推荐了15款主题。更多可以在 <a href="https://github.com/hexojs/hexo/wiki/Themes" target="_blank" rel="external">这里</a> 查看。</p>
<h4 id="多说评论">多说评论</h4><p>因为官方默认的是使用 Disqus，对国内用户不是很好。于是把这个换成了多说。去 <a href="http://duoshuo.com" target="_blank" rel="external">多说</a> 官网注册个账号，会获取到<code>xxx.duoshuo.com</code>这样的域名。</p>
<p>然后找到主题里面的文章的那个代码区域，将 Disqus 替换掉。可参考 <a href="http://dev.duoshuo.com/threads/541d3b2b40b5abcd2e4df0e9" target="_blank" rel="external">这里</a>。</p>
<p>这样完成之后基本的博客就算完成了，还剩最后一步最麻烦的：部署。</p>
<h3 id="Hexo_VPS_部署">Hexo VPS 部署</h3><p>当然，如果你选择部署在 GitHub 上，那么就不麻烦，很容易，可以参考官方文档。我个人不太建议这样，GitHub 的访问速度太容易抽筋，还有就是应该给予它更重要的用途。</p>
<h4 id="Linode">Linode</h4><p>选择了<code>Linode</code>，SSD 的访问速度还是不错的。买了最低配置的 $10/m，主机位置是在新加坡的，买不到日本的了。</p>
<p>按照它官网的方式，把系统先装好，我选择了最新的 Ubuntu 系统，然后再 boot，将服务开启（Running）。之后再按照之前的步骤把 Git &amp; Node.js &amp; Hexo 安装好。</p>
<h4 id="Nginx">Nginx</h4><p>Nginx 是一个高性能的 HTTP 和反向代理服务器。</p>
<p><strong>安装（Ubuntu 环境）</strong></p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$sudo apt-<span class="keyword">get</span> install nginx</span><br></pre></td></tr></table></figure>
<p><strong>在 Nginx 中新建虚拟主机</strong></p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">touch <span class="regexp">/etc/</span>nginx<span class="regexp">/sites-available/</span>blog</span><br><span class="line">vi <span class="regexp">/etc/</span>nginx<span class="regexp">/sites-available/</span>blog</span><br></pre></td></tr></table></figure>
<p>然后使用一下配置：</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">server</span> &#123;                </span><br><span class="line">	  <span class="title">listen</span> <span class="number">80</span> ;                                                                                                                                                                                              </span><br><span class="line">      <span class="title">root</span> /var/www/blog;                                                        </span><br><span class="line">	  <span class="title">server_name</span> llzz.me;                                                 </span><br><span class="line">	  <span class="title">access_log</span>  /var/log/nginx/blog_access.log;                                    </span><br><span class="line">	  <span class="title">error_log</span>   /var/log/nginx/blog_error.log;  </span><br><span class="line">	                                            </span><br><span class="line">	  <span class="title">location</span> <span class="regexp">~* ^.+\.(ico|gif|jpg|jpeg|png)$</span> &#123;                            </span><br><span class="line">		      <span class="title">root</span> /var/www/blog;                                    </span><br><span class="line">		      <span class="title">access_log</span>   <span class="built_in">off</span>;                 </span><br><span class="line">		      <span class="title">expires</span>      <span class="number">1d</span>;                            </span><br><span class="line">	  &#125;                                                                              </span><br><span class="line">	  <span class="title">location</span> <span class="regexp">~* ^.+\.(css|js|txt|xml|swf|wav)$</span> &#123;                                   </span><br><span class="line">		      <span class="title">root</span> /var/www/blog;                                                        </span><br><span class="line">		      <span class="title">access_log</span>   <span class="built_in">off</span>;                                                          </span><br><span class="line">		      <span class="title">expires</span>      <span class="number">10m</span>;                                                          </span><br><span class="line">	  &#125;                                                                              </span><br><span class="line">	  <span class="title">location</span> / &#123;                                                                   </span><br><span class="line">		     <span class="title">root</span> /var/www/blog;                                                </span><br><span class="line">		     <span class="title">if</span> (-f <span class="variable">$request_filename</span>) &#123;                                            </span><br><span class="line">		         <span class="title">rewrite</span><span class="regexp"> ^/(.*)$</span>  /<span class="variable">$1</span> <span class="built_in">break</span>;                                    </span><br><span class="line">		     &#125;                                                                      </span><br><span class="line">      &#125;                 </span><br><span class="line">		                                                                </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>server_name</code>      域名 ，<code>/var/www/blog</code>博客静态文件存放目录。</p>
<p>最后再执行一下命令。</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ln <span class="regexp">/etc/</span>nginx<span class="regexp">/sites-available/</span>blog <span class="regexp">/etc/</span>nginx<span class="regexp">/sites-enabled/</span>blog</span><br><span class="line"><span class="regexp">/etc/i</span>nit.d<span class="regexp">/nginx restart</span></span><br></pre></td></tr></table></figure>
<p>执行完之后，输入你的 IP 地址，是可以看到 Nginx 的成功信息的。</p>
<h3 id="SSH">SSH</h3><p>和平时使用 GitHub 一样，有一个 SSH 密钥。在本地<code>~/</code>目录下新建一个<code>.shh</code>目录（没有的话）。</p>
<p><strong>本地新建密钥公钥</strong></p>
<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -<span class="keyword">C</span> <span class="string">"blog"</span></span><br></pre></td></tr></table></figure>
<p>可以直接全部回车，然后生成的有 <code>id_rsa.pub</code>，打开复制内容。</p>
<p><strong>服务端配置</strong></p>
<p>新建一个 git 用户（root）</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adduser git <span class="comment">--ingroup sudo</span></span><br></pre></td></tr></table></figure>
<p>git 用户下，粘贴刚才生成的 SSH 密钥</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd ~</span><br><span class="line">mkdir <span class="class">.ssh</span></span><br><span class="line">cd <span class="class">.ssh</span></span><br><span class="line">touch authorized_keys</span><br><span class="line">vi authorized_keys</span><br></pre></td></tr></table></figure>
<p>之后再终端输入<code>ssh git@llzz.me</code>，如果没什么问题，就可以通过 SSH 访问 git了。</p>
<p><strong>创建博客静态文件的仓库</strong></p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd ~</span><br><span class="line">mkdir blog<span class="class">.git</span></span><br><span class="line">cd blog<span class="class">.git</span></span><br><span class="line">git init --bare</span><br></pre></td></tr></table></figure>
<p><strong>在本地配置 Hexo 的 deploy</strong></p>
<p>设置 git 用户名</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user<span class="class">.email</span> <span class="string">"email@example.com"</span></span><br><span class="line">git config --global user<span class="class">.name</span> <span class="string">"username</span></span><br></pre></td></tr></table></figure>
<p>修改 Hexo 配置文件里面的 deploy</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">deploy</span>:  </span><br><span class="line"><span class="attribute">type</span>: git  </span><br><span class="line"><span class="attribute">message</span>: update  </span><br><span class="line"><span class="attribute">repo</span>: git<span class="variable">@llzz</span>.<span class="attribute">me</span>:blog.git  </span><br><span class="line"><span class="attribute">branch</span>: master</span><br></pre></td></tr></table></figure>
<p>执行<code>hexo g</code>和    <code>hexo d</code>，没什么问题的话，静态文件会 push 到 git 仓库里面。（需要 clone 出来）</p>
<h4 id="Git_hooks">Git hooks</h4><p>每次 push 之后，博客静态文件将会在仓库里面，但是我们访问链接到的并不是 git 目录。所以每次 git 收到 push 消息之后，需要将内容拷贝到<code>/var/www/blog</code>目录下。</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> ~/blog.git/hooks</span><br><span class="line">touch <span class="keyword">post</span>-receive</span><br><span class="line">vi <span class="keyword">post</span>-receive</span><br></pre></td></tr></table></figure>
<p>使用下面的脚本，内容将会自动拷贝到指定的目录。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash -l</span></span><br><span class="line">GIT_REPO=/home/git/blog.git</span><br><span class="line">TMP_GIT_CLONE=/tmp/blog</span><br><span class="line">PUBLIC_WWW=/var/www/blog</span><br><span class="line">rm -rf <span class="variable">$&#123;TMP_GIT_CLONE&#125;</span></span><br><span class="line">git <span class="built_in">clone</span> <span class="variable">$GIT_REPO</span> <span class="variable">$TMP_GIT_CLONE</span></span><br><span class="line">rm -rf <span class="variable">$&#123;PUBLIC_WWW&#125;</span>/*</span><br><span class="line">cp -rf <span class="variable">$&#123;TMP_GIT_CLONE&#125;</span>/* <span class="variable">$&#123;PUBLIC_WWW&#125;</span></span><br></pre></td></tr></table></figure>
<p>最后更改脚步的权限和<code>/var/www/blog</code>访问权限。</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>chmod +x post-receive</span><br><span class="line"><span class="variable">$ </span>sudo chmod <span class="number">777</span> /var/www/blog</span><br></pre></td></tr></table></figure>
<h4 id="hexo_g_&amp;&amp;_hexo_d">hexo g &amp;&amp; hexo d</h4><p>博客内容做了更改之后，执行<code>hexo g</code>和<code>hexo d</code>就会把内容更新到你的服务器中。配置完之后更新文章别说有多么方便了。</p>
<h3 id="参考内容">参考内容</h3><p><a href="http://blog.berry10086.com/Tech/deploy-hexo-to-vps/" target="_blank" rel="external">点这里</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>总感觉 Wrodpress 太厚重了，刚好朋友推荐<code>Hexo</code>不错，于是就把博客迁徙了过来，折腾了一些时间，也遇到了一些问题。</p>
<h3 id="Hexo_安装">Hexo 安装</h3><p>Hexo 安装前需要电脑里面有安装 Git 和 No]]>
    </summary>
    
      <category term="Hexo" scheme="/tags/Hexo/"/>
    
      <category term="Hexo 部署" scheme="/tags/Hexo-%E9%83%A8%E7%BD%B2/"/>
    
      <category term="Hexo" scheme="/categories/Hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android Ormlite]]></title>
    <link href="/2015/04/28/android-ormlite/"/>
    <id>/2015/04/28/android-ormlite/</id>
    <published>2015-04-28T10:32:53.000Z</published>
    <updated>2015-05-27T08:18:41.000Z</updated>
    <content type="html"><![CDATA[<p>之前一直比较少用本地数据库，发现写 sql 语句很烦杂，才想起 orm 这回事。于是看了下 ormlite 的文档，就稍微整理下。</p>
<p>先来个单表的简单使用下 ormlite 的 api。</p>
<h3 id="先下载_ormlite-core-jar_&amp;_ormlite-android-jar"><strong>先下载 ormlite-core.jar &amp; ormlite-android.jar</strong></h3><p><a href="http://ormlite.com/releases/" target="_blank" rel="external">下载地址</a></p>
<h3 id="创建数据模型"><strong>创建数据模型</strong></h3><p>这里只简单创建了一个学生类，包含的信息有学号，姓名，年龄，性别，年级。</p>
<p><code>@DatabaseTable(tableName=&quot;student&quot;)
**public class Student implements Serializable {**``
@DatabaseField(generatedId = true,allowGeneratedIdInsert = true)
**private int id;**
@DatabaseField(canBeNull = false)
**private int stuId;**
@DatabaseField(canBeNull = false)
**private String stuName;**
@DatabaseField()
**private String stuAge;**
@DatabaseField()
**private String stuSex;**
@DatabaseField(defaultValue = &quot;one&quot;)
**private String stuGrade;**``
public Student() {}</code></p>
<p>使用<span style="color: #999999;"> <span style="color: #333333;">@DatabaseTable(tableName=”student”) 来定义表的名称。</span></span></p>
<p>使用 @DatabaseField() 来定义表的字段。（<a href="http://ormlite.com/javadoc/ormlite-core/doc-files/ormlite_2.html#Using" target="_blank" rel="external">字段的属性点击此处查看</a>）</p>
<p>注意，ormlite 要求需要有一个空的构造方法。</p>
<p>&nbsp;</p>
<h3 id="创建_DatabaseHelper_继承_OrmLiteSqliteOpenHelper"><strong>创建 DatabaseHelper 继承 OrmLiteSqliteOpenHelper</strong></h3><p>1，构造方法中调用父类方法创建数据库。</p>
<p><code>public DatabaseHelper(Context context){
super(context,DATABASE_NAME,null,DATABASE_VERSION);
}
&lt;code&gt;</code></p>
<p>2，继承需要重写 onCreate()，在方法里面创建数据库表</p>
<p><code>@Override
public void onCreate(SQLiteDatabase sqLiteDatabase, ConnectionSource connectionSource) {``
try {``
TableUtils.createTable(connectionSource, Student.class);
TableUtils.createTable(connectionSource,Course.class);``
} catch (SQLException e) {
e.printStackTrace();
}
}</code></p>
<p>注意，需要重写 onUpgrade() 方法，用于数据库版本更新</p>
<p>3，创建数据访问对象 Dao</p>
<p><code>public RuntimeExceptionDao&amp;lt;Student, Integer&amp;gt; getSimpleStudentDao() {``
if (simpleStudentDao == null) {
simpleStudentDao = getRuntimeExceptionDao(Student.class);
}``
return simpleStudentDao;
}</code></p>
<p>这些步骤完成之后，新建一个 DatabaseHelper 类，在 data/data 包名下是可以看到 databases 文件夹的，可以用 sqlite 命令查看数据库具体信息。</p>
<p>&nbsp;</p>
<h3 id="数据操作增删改查"><strong>数据操作增删改查</strong></h3><p>1，初始化数据（插入）</p>
<p><code>public static void insertStudent(Context context,List studentList){``
RuntimeExceptionDao&amp;lt;Student, Integer&amp;gt; simpleStudentDao = DatabaseHelper.getHelper(context)
.getSimpleStudentDao();``
for(int i=0;i&amp;lt;studentList.size();i++){
simpleStudentDao.create(studentList.get(i));
}
}</code></p>
<p>2，查询所有数据</p>
<p><code>List list = simpleStudentDao.queryForAll();</code></p>
<p>3，更新单个数据</p>
<p><code>simpleStudentDao.updateRaw(&quot;UPDATE</code>student<code>SET &quot;+ key + &quot;= &#39;&quot;+value+&quot;&#39; WHERE stuId = &quot;+where+&quot;;&quot;);</code></p>
<p>4，删除一个数据</p>
<p><code>simpleStudentDao.delete(student);</code></p>
<p>简单的一些操作就这样。</p>
<p>&nbsp;</p>
<hr>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>还有一些情况是，一对多，多对多，这些个人比较少用，也稍微看了下。官方文档上是要求设置 foreign 。根据个人创建的模型类来选择搭建方式。</p>
<p>这里根据之前的方式，再创建了一个 Course 课程数据表。搭建方式可以在 Course 中声明一个 Student 类型，再通过 join 来实现一对多 &amp; 多对多查询。</p>
<p>我这里通过新建一个 Student 与 Course 的关系类 StuCourseRelate 来关联数据。</p>
<p>&nbsp;</p>
<p><strong>新建 StuCourseRelate 类</strong></p>
<p><code>@DatabaseTable(tableName = &quot;student_courses&quot;)
public class StuCourseRelate {``
@DatabaseField(generatedId = true,allowGeneratedIdInsert = true)
**private int id;**
@DatabaseField(foreign = true,columnName=&quot;sId&quot;)
**private Student student;**
@DatabaseField(foreign = true,columnName=&quot;cId&quot;)
**private Course course;**``
public StuCourseRelate() {
}</code></p>
<p><strong>注意：columnName  一定要与其他两个类中的 id 的列名相同</strong></p>
<p>（因为它是通过自动生成的 id 来标记 Student &amp; Course 的，最好用个 final 写好，我今天懒了～）</p>
<p>&nbsp;</p>
<p><strong>查询方法</strong></p>
<p>这里只是查询每个学生选的课程。</p>
<p><code>public static List&amp;lt;Course&amp;gt; queryCourse(Context context,Student student) throws SQLException {``
List&amp;lt;Course&amp;gt; list = null;
RuntimeExceptionDao&amp;lt;StuCourseRelate, Integer&amp;gt; simpleStuCourseDao = DatabaseHelper.getHelper(context)
.getSimpleStuCourseDao();
RuntimeExceptionDao&amp;lt;Course, Integer&amp;gt; simpleCourseDao = DatabaseHelper.getHelper(context)
.getSimpleCourseDao();
/**
select * from</code>course<code>where</code>cId<code>in {
select</code>cId<code>from</code>student_courses<code>where</code>sId<code>= ?
}
**/
//内
QueryBuilder&amp;lt;StuCourseRelate, Integer&amp;gt; stuCourseQueryBuilder = simpleStuCourseDao.queryBuilder();
//select column : cId
stuCourseQueryBuilder.selectColumns(&quot;cId&quot;);
//where sId = ?
SelectArg userSelectArg = new SelectArg();
stuCourseQueryBuilder.where().eq(&quot;sId&quot;, userSelectArg);
//外
QueryBuilder&amp;lt;Course, Integer&amp;gt; couseBuilder = simpleCourseDao.queryBuilder();
//where in
PreparedQuery&amp;lt;Course&amp;gt; qurey = couseBuilder.where().in(&quot;cId&quot;,stuCourseQueryBuilder).prepare();
//index of the holder
qurey.setArgumentHolderValue(0,student);
list = simpleCourseDao.query(qurey);
return list;</code>}</p>
<p>数据的插入方法和之前的是一样的，有了数据之后获取到 student 的所有数据，之后查询。</p>
<p><code>DatabaseUtil.queryCourse(this,studentList.get(i));</code></p>
<hr>
<p>其他的可以看下文档 <a href="http://ormlite.com/javadoc/ormlite-core/doc-files/ormlite_toc.html#SEC_Contents" target="_blank" rel="external">这里</a></p>
<p><a href="https://github.com/lightlz/OrmliteDemo" target="_blank" rel="external">代码地址</a></p>
<p>&nbsp;</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>之前一直比较少用本地数据库，发现写 sql 语句很烦杂，才想起 orm 这回事。于是看了下 ormlite 的文档，就稍微整理下。</p>
<p>先来个单表的简单使用下 ormlite 的 api。</p>
<h3 id="先下载_ormlite-core-jar_&amp]]>
    </summary>
    
      <category term="Android" scheme="/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[2015]]></title>
    <link href="/2015/03/19/2015/"/>
    <id>/2015/03/19/2015/</id>
    <published>2015-03-19T14:46:56.000Z</published>
    <updated>2015-05-31T02:44:11.000Z</updated>
    <content type="html"><![CDATA[<p>本来早就要写写关于自己的2015，但是一直都写不出来。其实是没有挤时间去写这个东西，毕业设计，毕业论文还在等着。写下来，纯粹是想知道某年回来看的时候自己会有怎么样个心情。</p>
<p>2015对我来说算是一个不大不小的转折点，大吧，6月份就毕业了。说小吧，我出来工作也1年多了。但我觉的唯一不同的是，没毕业之前总是带着学生的心态去工作。</p>
<p>在这个时间段，我想，大家谈的最多的应该就是找到一个怎么样工作。在还没有找工作的时候，就经常听大人们说，现在的大学生好高骛远，不踏实的找工作。我想如果没有捷径，何苦去浪费这4年时间？ 错过了一些不错的工作机会，但并不需要灰心，更应该静心思考自己差在哪。当然，有时候你比他人优秀，但你远没有他人幸运。</p>
<p>工作了一年多，其实回想起来自己真的学会了什么？你问我，我也回答不上来。说技术上的提升吧，这一年又能成长到哪去，估计工作仅仅只是熟悉一些小平台，打打酱油就过去了，大事总有老的顶着。人情世故？个人修养？这也没有什么吧，做技术的天天在自己位置，又不用见客户，这方面学不到什么。</p>
<p>我记得就是之前公司有个韩国客户，当时他的一款平板应用就是我在调试。有次改到很晚，交接的中国人不在，他就跑到我位子上来问我“Have <span id="tran_11_0" class="">things</span> <span id="tran_11_1" class="">gotten worse</span> <span id="tran_11_3" class="">or</span> gotten <span id="tran_11_4" class="">better</span>?”，我一下子就听懂了，但是就是不知道怎么回答。</p>
<p>突然想他妈的我学了那么多英语都学了什么。</p>
<p>我想最大的收获就是工作让我学会思考和认清自己。思考很多种，或者解决问题的方法，或者怎么改变自己。因为工作就是为他人解决问题的，不更多的思考，只会增加负担。在执行这一系列的过程中，总会遇到问题，比如觉得自己英文不好，耐心不够，这都让自己更了解自己。不管有没有去改变，你都知道自己弱点所在。</p>
<p>工作给予了我这些，业余的时候也有一些小触动。让我必须给自己的忠告就是：要与优秀的人为伍，不然你很难达到优秀。</p>
<p>有人说，你的高度其实就是你最要好的5个朋友的高度平均值。这有点抽象，但是认真想一想，好似又是正确的。所以才会有那么多的大学生想进大公司，除了待遇之外，或许里面的人，都是相对优秀的吧。</p>
<p>除了给自己的忠告，我想还需要有适当的内心平静。人有时候会很清晰的自己想要什么，当走着走着的时候，这个又会变得模糊。我正走在这条路上，有时觉的走对了，有时候又不知道自己在忙什么。就好像“看山不是山，看水不是水”这个境界，所以此时想有个平静的内心，在想想我该继续追求什么。</p>
<p>还有一些小想法需要完成：</p>
<p>25本书。多读书，不然骗不了女孩子。</p>
<p>好好练字。或许能获得平静。</p>
<p>每周至少跳舞一次。</p>
<p>发表25篇博文。</p>
<p>旅游一次。呼吸下新鲜空气而已。</p>
<p>英文。这个不限量，但不能忘。</p>
<p>&nbsp;</p>
<p>2015，就这样吧。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>本来早就要写写关于自己的2015，但是一直都写不出来。其实是没有挤时间去写这个东西，毕业设计，毕业论文还在等着。写下来，纯粹是想知道某年回来看的时候自己会有怎么样个心情。</p>
<p>2015对我来说算是一个不大不小的转折点，大吧，6月份就毕业了。说小吧，我出来工作也1年]]>
    </summary>
    
      <category term="2015" scheme="/tags/2015/"/>
    
      <category term="Other" scheme="/categories/Other/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android 拍照 & 相册图片]]></title>
    <link href="/2015/02/06/android-e6-8b-8d-e7-85-a7-e7-9b-b8-e5-86-8c-e5-9b-be-e7-89-87/"/>
    <id>/2015/02/06/android-e6-8b-8d-e7-85-a7-e7-9b-b8-e5-86-8c-e5-9b-be-e7-89-87/</id>
    <published>2015-02-06T03:53:37.000Z</published>
    <updated>2015-05-25T03:00:49.000Z</updated>
    <content type="html"><![CDATA[<p>因为项目需要用到类似于朋友圈这个功能，所以会使用到拍照和相册图片选择。</p>
<p>搜索了一下，发现实现的例子很多，大多数用的 universal-image-loader 这个第三方库，有的使用了下效果不太理想。</p>
<p>多方参照下粗略写了下，图片列表感觉也顺畅。</p>
<p>&nbsp;</p>
<ul>
<li><strong>拍照</strong><br>&nbsp;</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="http://llzz.me/wp-content/uploads/2015/02/device-2015-02-06-103912.png" target="_blank" rel="external"><img src="http://llzz.me/wp-content/uploads/2015/02/device-2015-02-06-103912-576x1024.png" alt="device-2015-02-06-103912"></a></p>
<p>&nbsp;</p>
<p>界面很普通，那个 [+] 号又两个 Action，长按表示拍照，点击表示相册选择，个人觉得这样交互还过的去。</p>
<p>拍照功能:</p>
<p><pre> Intent openCameraIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);<br> File file = new File(getTempBmpDir()+<br> String.valueOf(System.currentTimeMillis()+ “.jpg”));<br> Uri uri = Uri.fromFile(file);<br> BitmapConstant.BITMAP_PATH = file.getPath();<br> openCameraIntent.putExtra(MediaStore.EXTRA_OUTPUT, uri);<br> this.startActivityForResult(openCameraIntent, BitmapConstant.TAKE_PICTURE);</pre><br>这个只是调用系统的拍照，然后将图片保存下。然后 onActivityResult 接收进行压缩处理。</p>
<p>压缩方法也能找到很多，这里用的查看<a href="https://github.com/lightlz/FriendsMoments/blob/master/FriendsCommunity/src/com/light/friendscommunity/utils/ImageUtils.java" target="_blank" rel="external">这里</a>。</p>
<p>&nbsp;</p>
<ul>
<li><strong>相册图片选择</strong><br>&nbsp;</li>
</ul>
<p><a href="http://llzz.me/wp-content/uploads/2015/02/device-2015-02-06-103734.png" target="_blank" rel="external"><img src="http://llzz.me/wp-content/uploads/2015/02/device-2015-02-06-103734-576x1024.png" alt="device-2015-02-06-103734"></a></p>
<p>&nbsp;</p>
<p>相册图片显示主要是获取到图片的缩略图和图片缓存方式。</p>
<p>相册图片缩略图和原图对应关系，及如何获取这篇<a href="http://blog.csdn.net/java2009cgh/article/details/8364735" target="_blank" rel="external">博文</a>讲的清楚 。</p>
<p>底部是一个 PopupWindow， 用于展示相册的目录，和 Lofter 相册选择相似，当然这里粗糙多了。</p>
<p>&nbsp;</p>
<p>相册展示功能:</p>
<ul>
<li><p>获取缩略图信息</p>
</li>
<li><p>获取原图信息</p>
</li>
<li><p>保存原图与缩略图的对应关系</p>
</li>
<li><p>使用 SoftReference 缓存 Bitmap</p>
</li>
<li><p>若没有缩略图用原图压缩显示（压缩方法和拍照那里相同）</p>
</li>
</ul>
<p><span style="color: #808080;">SoftReference ： 软引用，实现内存的高速缓存，内存足够时，系统不会回收。</span></p>
<p>&nbsp;</p>
<p>功能写到这就不想写了，还有图片点击选择后返回发布界面的功能等~</p>
<p><a href="https://github.com/lightlz/FriendsMoments" target="_blank" rel="external">源码请点这里</a></p>
<p>&nbsp;</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>因为项目需要用到类似于朋友圈这个功能，所以会使用到拍照和相册图片选择。</p>
<p>搜索了一下，发现实现的例子很多，大多数用的 universal-image-loader 这个第三方库，有的使用了下效果不太理想。</p>
<p>多方参照下粗略写了下，图片列表感觉也顺畅。]]>
    </summary>
    
      <category term="android" scheme="/tags/android/"/>
    
      <category term="拍照" scheme="/tags/%E6%8B%8D%E7%85%A7/"/>
    
      <category term="相册" scheme="/tags/%E7%9B%B8%E5%86%8C/"/>
    
      <category term="Android" scheme="/categories/Android/"/>
    
  </entry>
  
</feed>